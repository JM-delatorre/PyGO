// Generated from Python3.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';
// const antlr4 = require('antlr4');
import Python3Listener from './Python3Listener.js';
// const Python3Listener = require('./Python3Listener');
const serializedATN = [4,1,94,1056,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,1,0,1,0,1,
0,1,0,3,0,174,8,0,1,1,1,1,5,1,178,8,1,10,1,12,1,181,9,1,1,1,1,1,1,2,1,2,
5,2,187,8,2,10,2,12,2,190,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,198,8,3,1,3,3,
3,201,8,3,1,3,1,3,1,4,4,4,206,8,4,11,4,12,4,207,1,5,1,5,1,5,3,5,213,8,5,
1,6,1,6,1,6,1,6,1,6,3,6,220,8,6,1,6,1,6,1,6,1,7,1,7,3,7,227,8,7,1,7,1,7,
1,8,1,8,1,8,3,8,234,8,8,1,8,1,8,1,8,1,8,3,8,240,8,8,5,8,242,8,8,10,8,12,
8,245,9,8,1,8,1,8,1,8,3,8,250,8,8,1,8,1,8,1,8,1,8,3,8,256,8,8,5,8,258,8,
8,10,8,12,8,261,9,8,1,8,1,8,1,8,3,8,266,8,8,1,8,1,8,3,8,270,8,8,3,8,272,
8,8,1,8,1,8,3,8,276,8,8,1,8,1,8,1,8,1,8,3,8,282,8,8,5,8,284,8,8,10,8,12,
8,287,9,8,1,8,1,8,1,8,3,8,292,8,8,1,8,1,8,3,8,296,8,8,1,9,1,9,1,9,3,9,301,
8,9,1,10,1,10,1,10,3,10,306,8,10,1,10,1,10,1,10,1,10,3,10,312,8,10,5,10,
314,8,10,10,10,12,10,317,9,10,1,10,1,10,1,10,3,10,322,8,10,1,10,1,10,1,10,
1,10,3,10,328,8,10,5,10,330,8,10,10,10,12,10,333,9,10,1,10,1,10,1,10,3,10,
338,8,10,1,10,1,10,3,10,342,8,10,3,10,344,8,10,1,10,1,10,3,10,348,8,10,1,
10,1,10,1,10,1,10,3,10,354,8,10,5,10,356,8,10,10,10,12,10,359,9,10,1,10,
1,10,1,10,3,10,364,8,10,1,10,1,10,3,10,368,8,10,1,11,1,11,1,12,1,12,3,12,
374,8,12,1,13,1,13,1,13,5,13,379,8,13,10,13,12,13,382,9,13,1,13,3,13,385,
8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,397,8,14,1,15,
1,15,1,15,1,15,3,15,403,8,15,1,15,1,15,1,15,3,15,408,8,15,5,15,410,8,15,
10,15,12,15,413,9,15,3,15,415,8,15,1,16,1,16,3,16,419,8,16,1,16,1,16,1,16,
3,16,424,8,16,5,16,426,8,16,10,16,12,16,429,9,16,1,16,3,16,432,8,16,1,17,
1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,446,8,20,1,21,
1,21,1,22,1,22,1,23,1,23,3,23,454,8,23,1,24,1,24,1,25,1,25,1,25,1,25,3,25,
462,8,25,3,25,464,8,25,1,26,1,26,3,26,468,8,26,1,27,1,27,1,27,1,28,1,28,
5,28,475,8,28,10,28,12,28,478,9,28,1,28,1,28,4,28,482,8,28,11,28,12,28,483,
3,28,486,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,495,8,28,1,29,1,29,
1,29,3,29,500,8,29,1,30,1,30,1,30,3,30,505,8,30,1,31,1,31,1,31,5,31,510,
8,31,10,31,12,31,513,9,31,1,31,3,31,516,8,31,1,32,1,32,1,32,5,32,521,8,32,
10,32,12,32,524,9,32,1,33,1,33,1,33,5,33,529,8,33,10,33,12,33,532,9,33,1,
34,1,34,1,34,1,34,5,34,538,8,34,10,34,12,34,541,9,34,1,35,1,35,1,35,1,35,
5,35,547,8,35,10,35,12,35,550,9,35,1,36,1,36,1,36,1,36,3,36,556,8,36,1,37,
1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,566,8,37,1,38,1,38,1,38,1,38,1,38,
1,38,1,38,1,38,1,38,5,38,577,8,38,10,38,12,38,580,9,38,1,38,1,38,1,38,3,
38,585,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,594,8,39,1,40,1,40,1,
40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,605,8,40,1,41,1,41,1,41,1,41,1,41,
1,41,1,41,4,41,614,8,41,11,41,12,41,615,1,41,1,41,1,41,3,41,621,8,41,1,41,
1,41,1,41,3,41,626,8,41,1,41,1,41,1,41,3,41,631,8,41,1,42,1,42,1,42,1,42,
5,42,637,8,42,10,42,12,42,640,9,42,1,42,1,42,1,42,1,43,1,43,1,43,3,43,648,
8,43,1,44,1,44,1,44,1,44,3,44,654,8,44,3,44,656,8,44,1,45,1,45,1,45,1,45,
4,45,662,8,45,11,45,12,45,663,1,45,1,45,3,45,668,8,45,1,46,1,46,1,46,1,46,
1,46,1,46,3,46,676,8,46,1,46,3,46,679,8,46,1,47,1,47,3,47,683,8,47,1,48,
1,48,3,48,687,8,48,1,48,1,48,1,48,1,49,1,49,3,49,694,8,49,1,49,1,49,1,49,
1,50,1,50,1,50,5,50,702,8,50,10,50,12,50,705,9,50,1,51,1,51,1,51,5,51,710,
8,51,10,51,12,51,713,9,51,1,52,1,52,1,52,3,52,718,8,52,1,53,1,53,1,53,1,
53,5,53,724,8,53,10,53,12,53,727,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
1,54,1,54,1,54,1,54,1,54,1,54,3,54,742,8,54,1,55,3,55,745,8,55,1,55,1,55,
1,56,1,56,1,56,5,56,752,8,56,10,56,12,56,755,9,56,1,57,1,57,1,57,5,57,760,
8,57,10,57,12,57,763,9,57,1,58,1,58,1,58,5,58,768,8,58,10,58,12,58,771,9,
58,1,59,1,59,1,59,1,59,1,59,5,59,778,8,59,10,59,12,59,781,9,59,1,60,1,60,
1,60,1,60,1,60,5,60,788,8,60,10,60,12,60,791,9,60,1,61,1,61,1,61,1,61,1,
61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,804,8,61,10,61,12,61,807,9,61,1,62,
1,62,1,62,1,62,1,62,1,62,1,62,3,62,816,8,62,1,63,1,63,5,63,820,8,63,10,63,
12,63,823,9,63,1,63,1,63,3,63,827,8,63,1,64,1,64,1,64,3,64,832,8,64,1,64,
1,64,1,64,3,64,837,8,64,1,64,1,64,1,64,3,64,842,8,64,1,64,1,64,1,64,1,64,
4,64,848,8,64,11,64,12,64,849,1,64,1,64,1,64,1,64,3,64,856,8,64,1,65,1,65,
1,65,1,65,5,65,862,8,65,10,65,12,65,865,9,65,1,65,3,65,868,8,65,3,65,870,
8,65,1,66,1,66,3,66,874,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,883,
8,66,1,67,1,67,1,67,5,67,888,8,67,10,67,12,67,891,9,67,1,67,3,67,894,8,67,
1,68,1,68,3,68,898,8,68,1,68,1,68,3,68,902,8,68,1,68,3,68,905,8,68,3,68,
907,8,68,1,69,1,69,3,69,911,8,69,1,70,1,70,1,70,5,70,916,8,70,10,70,12,70,
919,9,70,1,70,3,70,922,8,70,1,71,1,71,1,71,5,71,927,8,71,10,71,12,71,930,
9,71,1,71,3,71,933,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,
944,8,72,10,72,12,72,947,9,72,1,72,3,72,950,8,72,3,72,952,8,72,1,72,1,72,
1,72,1,72,5,72,958,8,72,10,72,12,72,961,9,72,1,72,3,72,964,8,72,3,72,966,
8,72,3,72,968,8,72,1,73,1,73,1,73,1,73,3,73,974,8,73,1,73,3,73,977,8,73,
1,73,1,73,1,73,1,74,1,74,1,74,5,74,985,8,74,10,74,12,74,988,9,74,1,74,1,
74,3,74,992,8,74,1,74,1,74,1,74,1,74,5,74,998,8,74,10,74,12,74,1001,9,74,
1,74,1,74,1,74,3,74,1006,8,74,1,74,1,74,3,74,1010,8,74,1,75,1,75,3,75,1014,
8,75,1,75,1,75,1,75,1,75,3,75,1020,8,75,1,76,1,76,3,76,1024,8,76,1,77,1,
77,1,77,1,77,1,77,3,77,1031,8,77,1,78,1,78,1,78,3,78,1036,8,78,1,79,1,79,
3,79,1040,8,79,1,80,1,80,1,80,3,80,1045,8,80,1,81,1,81,1,82,1,82,1,82,3,
82,1052,8,82,1,83,1,83,1,83,0,0,84,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,0,4,1,0,78,90,1,0,44,45,1,0,36,37,1,0,38,41,
1168,0,173,1,0,0,0,2,179,1,0,0,0,4,184,1,0,0,0,6,193,1,0,0,0,8,205,1,0,0,
0,10,209,1,0,0,0,12,214,1,0,0,0,14,224,1,0,0,0,16,295,1,0,0,0,18,297,1,0,
0,0,20,367,1,0,0,0,22,369,1,0,0,0,24,373,1,0,0,0,26,375,1,0,0,0,28,396,1,
0,0,0,30,398,1,0,0,0,32,418,1,0,0,0,34,433,1,0,0,0,36,435,1,0,0,0,38,438,
1,0,0,0,40,445,1,0,0,0,42,447,1,0,0,0,44,449,1,0,0,0,46,451,1,0,0,0,48,455,
1,0,0,0,50,457,1,0,0,0,52,467,1,0,0,0,54,469,1,0,0,0,56,472,1,0,0,0,58,496,
1,0,0,0,60,501,1,0,0,0,62,506,1,0,0,0,64,517,1,0,0,0,66,525,1,0,0,0,68,533,
1,0,0,0,70,542,1,0,0,0,72,551,1,0,0,0,74,565,1,0,0,0,76,567,1,0,0,0,78,586,
1,0,0,0,80,595,1,0,0,0,82,606,1,0,0,0,84,632,1,0,0,0,86,644,1,0,0,0,88,649,
1,0,0,0,90,667,1,0,0,0,92,678,1,0,0,0,94,682,1,0,0,0,96,684,1,0,0,0,98,691,
1,0,0,0,100,698,1,0,0,0,102,706,1,0,0,0,104,717,1,0,0,0,106,719,1,0,0,0,
108,741,1,0,0,0,110,744,1,0,0,0,112,748,1,0,0,0,114,756,1,0,0,0,116,764,
1,0,0,0,118,772,1,0,0,0,120,782,1,0,0,0,122,792,1,0,0,0,124,815,1,0,0,0,
126,817,1,0,0,0,128,855,1,0,0,0,130,857,1,0,0,0,132,882,1,0,0,0,134,884,
1,0,0,0,136,906,1,0,0,0,138,908,1,0,0,0,140,912,1,0,0,0,142,923,1,0,0,0,
144,967,1,0,0,0,146,969,1,0,0,0,148,986,1,0,0,0,150,1019,1,0,0,0,152,1023,
1,0,0,0,154,1025,1,0,0,0,156,1032,1,0,0,0,158,1037,1,0,0,0,160,1044,1,0,
0,0,162,1046,1,0,0,0,164,1051,1,0,0,0,166,1053,1,0,0,0,168,174,5,34,0,0,
169,174,3,26,13,0,170,171,3,74,37,0,171,172,5,34,0,0,172,174,1,0,0,0,173,
168,1,0,0,0,173,169,1,0,0,0,173,170,1,0,0,0,174,1,1,0,0,0,175,178,5,34,0,
0,176,178,3,24,12,0,177,175,1,0,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,
177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,5,0,
0,1,183,3,1,0,0,0,184,188,3,142,71,0,185,187,5,34,0,0,186,185,1,0,0,0,187,
190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,
0,0,191,192,5,0,0,1,192,5,1,0,0,0,193,194,5,76,0,0,194,200,3,66,33,0,195,
197,5,47,0,0,196,198,3,148,74,0,197,196,1,0,0,0,197,198,1,0,0,0,198,199,
1,0,0,0,199,201,5,48,0,0,200,195,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,
202,203,5,34,0,0,203,7,1,0,0,0,204,206,3,6,3,0,205,204,1,0,0,0,206,207,1,
0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,9,1,0,0,0,209,212,3,8,4,0,210,
213,3,146,73,0,211,213,3,12,6,0,212,210,1,0,0,0,212,211,1,0,0,0,213,11,1,
0,0,0,214,215,5,1,0,0,215,216,5,35,0,0,216,219,3,14,7,0,217,218,5,77,0,0,
218,220,3,92,46,0,219,217,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,
5,50,0,0,222,223,3,90,45,0,223,13,1,0,0,0,224,226,5,47,0,0,225,227,3,16,
8,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,5,48,0,0,229,
15,1,0,0,0,230,233,3,18,9,0,231,232,5,53,0,0,232,234,3,92,46,0,233,231,1,
0,0,0,233,234,1,0,0,0,234,243,1,0,0,0,235,236,5,49,0,0,236,239,3,18,9,0,
237,238,5,53,0,0,238,240,3,92,46,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,
1,0,0,0,241,235,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,
244,271,1,0,0,0,245,243,1,0,0,0,246,269,5,49,0,0,247,249,5,46,0,0,248,250,
3,18,9,0,249,248,1,0,0,0,249,250,1,0,0,0,250,259,1,0,0,0,251,252,5,49,0,
0,252,255,3,18,9,0,253,254,5,53,0,0,254,256,3,92,46,0,255,253,1,0,0,0,255,
256,1,0,0,0,256,258,1,0,0,0,257,251,1,0,0,0,258,261,1,0,0,0,259,257,1,0,
0,0,259,260,1,0,0,0,260,265,1,0,0,0,261,259,1,0,0,0,262,263,5,49,0,0,263,
264,5,52,0,0,264,266,3,18,9,0,265,262,1,0,0,0,265,266,1,0,0,0,266,270,1,
0,0,0,267,268,5,52,0,0,268,270,3,18,9,0,269,247,1,0,0,0,269,267,1,0,0,0,
269,270,1,0,0,0,270,272,1,0,0,0,271,246,1,0,0,0,271,272,1,0,0,0,272,296,
1,0,0,0,273,275,5,46,0,0,274,276,3,18,9,0,275,274,1,0,0,0,275,276,1,0,0,
0,276,285,1,0,0,0,277,278,5,49,0,0,278,281,3,18,9,0,279,280,5,53,0,0,280,
282,3,92,46,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,277,1,
0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,291,1,0,0,0,287,
285,1,0,0,0,288,289,5,49,0,0,289,290,5,52,0,0,290,292,3,18,9,0,291,288,1,
0,0,0,291,292,1,0,0,0,292,296,1,0,0,0,293,294,5,52,0,0,294,296,3,18,9,0,
295,230,1,0,0,0,295,273,1,0,0,0,295,293,1,0,0,0,296,17,1,0,0,0,297,300,5,
35,0,0,298,299,5,50,0,0,299,301,3,92,46,0,300,298,1,0,0,0,300,301,1,0,0,
0,301,19,1,0,0,0,302,305,3,22,11,0,303,304,5,53,0,0,304,306,3,92,46,0,305,
303,1,0,0,0,305,306,1,0,0,0,306,315,1,0,0,0,307,308,5,49,0,0,308,311,3,22,
11,0,309,310,5,53,0,0,310,312,3,92,46,0,311,309,1,0,0,0,311,312,1,0,0,0,
312,314,1,0,0,0,313,307,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,
1,0,0,0,316,343,1,0,0,0,317,315,1,0,0,0,318,341,5,49,0,0,319,321,5,46,0,
0,320,322,3,22,11,0,321,320,1,0,0,0,321,322,1,0,0,0,322,331,1,0,0,0,323,
324,5,49,0,0,324,327,3,22,11,0,325,326,5,53,0,0,326,328,3,92,46,0,327,325,
1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,323,1,0,0,0,330,333,1,0,0,0,
331,329,1,0,0,0,331,332,1,0,0,0,332,337,1,0,0,0,333,331,1,0,0,0,334,335,
5,49,0,0,335,336,5,52,0,0,336,338,3,22,11,0,337,334,1,0,0,0,337,338,1,0,
0,0,338,342,1,0,0,0,339,340,5,52,0,0,340,342,3,22,11,0,341,319,1,0,0,0,341,
339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,318,1,0,0,0,343,344,1,0,
0,0,344,368,1,0,0,0,345,347,5,46,0,0,346,348,3,22,11,0,347,346,1,0,0,0,347,
348,1,0,0,0,348,357,1,0,0,0,349,350,5,49,0,0,350,353,3,22,11,0,351,352,5,
53,0,0,352,354,3,92,46,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,
355,349,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,363,
1,0,0,0,359,357,1,0,0,0,360,361,5,49,0,0,361,362,5,52,0,0,362,364,3,22,11,
0,363,360,1,0,0,0,363,364,1,0,0,0,364,368,1,0,0,0,365,366,5,52,0,0,366,368,
3,22,11,0,367,302,1,0,0,0,367,345,1,0,0,0,367,365,1,0,0,0,368,21,1,0,0,0,
369,370,5,35,0,0,370,23,1,0,0,0,371,374,3,26,13,0,372,374,3,74,37,0,373,
371,1,0,0,0,373,372,1,0,0,0,374,25,1,0,0,0,375,380,3,28,14,0,376,377,5,51,
0,0,377,379,3,28,14,0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,
381,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,383,385,5,51,0,0,384,383,1,0,
0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,5,34,0,0,387,27,1,0,0,0,388,
397,3,30,15,0,389,397,3,36,18,0,390,397,3,38,19,0,391,397,3,40,20,0,392,
397,3,52,26,0,393,397,3,68,34,0,394,397,3,70,35,0,395,397,3,72,36,0,396,
388,1,0,0,0,396,389,1,0,0,0,396,390,1,0,0,0,396,391,1,0,0,0,396,392,1,0,
0,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,29,1,0,0,0,398,414,
3,32,16,0,399,402,3,34,17,0,400,403,3,158,79,0,401,403,3,142,71,0,402,400,
1,0,0,0,402,401,1,0,0,0,403,415,1,0,0,0,404,407,5,53,0,0,405,408,3,158,79,
0,406,408,3,32,16,0,407,405,1,0,0,0,407,406,1,0,0,0,408,410,1,0,0,0,409,
404,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,415,1,0,
0,0,413,411,1,0,0,0,414,399,1,0,0,0,414,411,1,0,0,0,415,31,1,0,0,0,416,419,
3,92,46,0,417,419,3,110,55,0,418,416,1,0,0,0,418,417,1,0,0,0,419,427,1,0,
0,0,420,423,5,49,0,0,421,424,3,92,46,0,422,424,3,110,55,0,423,421,1,0,0,
0,423,422,1,0,0,0,424,426,1,0,0,0,425,420,1,0,0,0,426,429,1,0,0,0,427,425,
1,0,0,0,427,428,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,430,432,5,49,0,0,
431,430,1,0,0,0,431,432,1,0,0,0,432,33,1,0,0,0,433,434,7,0,0,0,434,35,1,
0,0,0,435,436,5,30,0,0,436,437,3,140,70,0,437,37,1,0,0,0,438,439,5,31,0,
0,439,39,1,0,0,0,440,446,3,42,21,0,441,446,3,44,22,0,442,446,3,46,23,0,443,
446,3,50,25,0,444,446,3,48,24,0,445,440,1,0,0,0,445,441,1,0,0,0,445,442,
1,0,0,0,445,443,1,0,0,0,445,444,1,0,0,0,446,41,1,0,0,0,447,448,5,33,0,0,
448,43,1,0,0,0,449,450,5,32,0,0,450,45,1,0,0,0,451,453,5,2,0,0,452,454,3,
142,71,0,453,452,1,0,0,0,453,454,1,0,0,0,454,47,1,0,0,0,455,456,3,158,79,
0,456,49,1,0,0,0,457,463,5,3,0,0,458,461,3,92,46,0,459,460,5,4,0,0,460,462,
3,92,46,0,461,459,1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,458,1,0,0,
0,463,464,1,0,0,0,464,51,1,0,0,0,465,468,3,54,27,0,466,468,3,56,28,0,467,
465,1,0,0,0,467,466,1,0,0,0,468,53,1,0,0,0,469,470,5,5,0,0,470,471,3,64,
32,0,471,55,1,0,0,0,472,485,5,4,0,0,473,475,7,1,0,0,474,473,1,0,0,0,475,
478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,476,1,0,
0,0,479,486,3,66,33,0,480,482,7,1,0,0,481,480,1,0,0,0,482,483,1,0,0,0,483,
481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,476,1,0,0,0,485,481,1,0,
0,0,486,487,1,0,0,0,487,494,5,5,0,0,488,495,5,46,0,0,489,490,5,47,0,0,490,
491,3,62,31,0,491,492,5,48,0,0,492,495,1,0,0,0,493,495,3,62,31,0,494,488,
1,0,0,0,494,489,1,0,0,0,494,493,1,0,0,0,495,57,1,0,0,0,496,499,5,35,0,0,
497,498,5,6,0,0,498,500,5,35,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,59,
1,0,0,0,501,504,3,66,33,0,502,503,5,6,0,0,503,505,5,35,0,0,504,502,1,0,0,
0,504,505,1,0,0,0,505,61,1,0,0,0,506,511,3,58,29,0,507,508,5,49,0,0,508,
510,3,58,29,0,509,507,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,
0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,514,516,5,49,0,0,515,514,1,0,0,0,515,
516,1,0,0,0,516,63,1,0,0,0,517,522,3,60,30,0,518,519,5,49,0,0,519,521,3,
60,30,0,520,518,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,
523,65,1,0,0,0,524,522,1,0,0,0,525,530,5,35,0,0,526,527,5,44,0,0,527,529,
5,35,0,0,528,526,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,
531,67,1,0,0,0,532,530,1,0,0,0,533,534,5,7,0,0,534,539,5,35,0,0,535,536,
5,49,0,0,536,538,5,35,0,0,537,535,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,
0,539,540,1,0,0,0,540,69,1,0,0,0,541,539,1,0,0,0,542,543,5,8,0,0,543,548,
5,35,0,0,544,545,5,49,0,0,545,547,5,35,0,0,546,544,1,0,0,0,547,550,1,0,0,
0,548,546,1,0,0,0,548,549,1,0,0,0,549,71,1,0,0,0,550,548,1,0,0,0,551,552,
5,9,0,0,552,555,3,92,46,0,553,554,5,49,0,0,554,556,3,92,46,0,555,553,1,0,
0,0,555,556,1,0,0,0,556,73,1,0,0,0,557,566,3,76,38,0,558,566,3,78,39,0,559,
566,3,80,40,0,560,566,3,82,41,0,561,566,3,84,42,0,562,566,3,12,6,0,563,566,
3,146,73,0,564,566,3,10,5,0,565,557,1,0,0,0,565,558,1,0,0,0,565,559,1,0,
0,0,565,560,1,0,0,0,565,561,1,0,0,0,565,562,1,0,0,0,565,563,1,0,0,0,565,
564,1,0,0,0,566,75,1,0,0,0,567,568,5,10,0,0,568,569,3,92,46,0,569,570,5,
50,0,0,570,578,3,90,45,0,571,572,5,11,0,0,572,573,3,92,46,0,573,574,5,50,
0,0,574,575,3,90,45,0,575,577,1,0,0,0,576,571,1,0,0,0,577,580,1,0,0,0,578,
576,1,0,0,0,578,579,1,0,0,0,579,584,1,0,0,0,580,578,1,0,0,0,581,582,5,12,
0,0,582,583,5,50,0,0,583,585,3,90,45,0,584,581,1,0,0,0,584,585,1,0,0,0,585,
77,1,0,0,0,586,587,5,13,0,0,587,588,3,92,46,0,588,589,5,50,0,0,589,593,3,
90,45,0,590,591,5,12,0,0,591,592,5,50,0,0,592,594,3,90,45,0,593,590,1,0,
0,0,593,594,1,0,0,0,594,79,1,0,0,0,595,596,5,14,0,0,596,597,3,140,70,0,597,
598,5,15,0,0,598,599,3,142,71,0,599,600,5,50,0,0,600,604,3,90,45,0,601,602,
5,12,0,0,602,603,5,50,0,0,603,605,3,90,45,0,604,601,1,0,0,0,604,605,1,0,
0,0,605,81,1,0,0,0,606,607,5,16,0,0,607,608,5,50,0,0,608,630,3,90,45,0,609,
610,3,88,44,0,610,611,5,50,0,0,611,612,3,90,45,0,612,614,1,0,0,0,613,609,
1,0,0,0,614,615,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,620,1,0,0,0,
617,618,5,12,0,0,618,619,5,50,0,0,619,621,3,90,45,0,620,617,1,0,0,0,620,
621,1,0,0,0,621,625,1,0,0,0,622,623,5,17,0,0,623,624,5,50,0,0,624,626,3,
90,45,0,625,622,1,0,0,0,625,626,1,0,0,0,626,631,1,0,0,0,627,628,5,17,0,0,
628,629,5,50,0,0,629,631,3,90,45,0,630,613,1,0,0,0,630,627,1,0,0,0,631,83,
1,0,0,0,632,633,5,18,0,0,633,638,3,86,43,0,634,635,5,49,0,0,635,637,3,86,
43,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,
641,1,0,0,0,640,638,1,0,0,0,641,642,5,50,0,0,642,643,3,90,45,0,643,85,1,
0,0,0,644,647,3,92,46,0,645,646,5,6,0,0,646,648,3,112,56,0,647,645,1,0,0,
0,647,648,1,0,0,0,648,87,1,0,0,0,649,655,5,19,0,0,650,653,3,92,46,0,651,
652,5,6,0,0,652,654,5,35,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,656,1,0,
0,0,655,650,1,0,0,0,655,656,1,0,0,0,656,89,1,0,0,0,657,668,3,26,13,0,658,
659,5,34,0,0,659,661,5,93,0,0,660,662,3,24,12,0,661,660,1,0,0,0,662,663,
1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,5,94,0,0,
666,668,1,0,0,0,667,657,1,0,0,0,667,658,1,0,0,0,668,91,1,0,0,0,669,675,3,
100,50,0,670,671,5,10,0,0,671,672,3,100,50,0,672,673,5,12,0,0,673,674,3,
92,46,0,674,676,1,0,0,0,675,670,1,0,0,0,675,676,1,0,0,0,676,679,1,0,0,0,
677,679,3,96,48,0,678,669,1,0,0,0,678,677,1,0,0,0,679,93,1,0,0,0,680,683,
3,100,50,0,681,683,3,98,49,0,682,680,1,0,0,0,682,681,1,0,0,0,683,95,1,0,
0,0,684,686,5,20,0,0,685,687,3,20,10,0,686,685,1,0,0,0,686,687,1,0,0,0,687,
688,1,0,0,0,688,689,5,50,0,0,689,690,3,92,46,0,690,97,1,0,0,0,691,693,5,
20,0,0,692,694,3,20,10,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,
695,696,5,50,0,0,696,697,3,94,47,0,697,99,1,0,0,0,698,703,3,102,51,0,699,
700,5,21,0,0,700,702,3,102,51,0,701,699,1,0,0,0,702,705,1,0,0,0,703,701,
1,0,0,0,703,704,1,0,0,0,704,101,1,0,0,0,705,703,1,0,0,0,706,711,3,104,52,
0,707,708,5,22,0,0,708,710,3,104,52,0,709,707,1,0,0,0,710,713,1,0,0,0,711,
709,1,0,0,0,711,712,1,0,0,0,712,103,1,0,0,0,713,711,1,0,0,0,714,715,5,23,
0,0,715,718,3,104,52,0,716,718,3,106,53,0,717,714,1,0,0,0,717,716,1,0,0,
0,718,105,1,0,0,0,719,725,3,110,55,0,720,721,3,108,54,0,721,722,3,110,55,
0,722,724,1,0,0,0,723,720,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,
1,0,0,0,726,107,1,0,0,0,727,725,1,0,0,0,728,742,5,69,0,0,729,742,5,70,0,
0,730,742,5,71,0,0,731,742,5,72,0,0,732,742,5,73,0,0,733,742,5,74,0,0,734,
742,5,75,0,0,735,742,5,15,0,0,736,737,5,23,0,0,737,742,5,15,0,0,738,742,
5,24,0,0,739,740,5,24,0,0,740,742,5,23,0,0,741,728,1,0,0,0,741,729,1,0,0,
0,741,730,1,0,0,0,741,731,1,0,0,0,741,732,1,0,0,0,741,733,1,0,0,0,741,734,
1,0,0,0,741,735,1,0,0,0,741,736,1,0,0,0,741,738,1,0,0,0,741,739,1,0,0,0,
742,109,1,0,0,0,743,745,5,46,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,746,
1,0,0,0,746,747,3,112,56,0,747,111,1,0,0,0,748,753,3,114,57,0,749,750,5,
56,0,0,750,752,3,114,57,0,751,749,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,
0,753,754,1,0,0,0,754,113,1,0,0,0,755,753,1,0,0,0,756,761,3,116,58,0,757,
758,5,57,0,0,758,760,3,116,58,0,759,757,1,0,0,0,760,763,1,0,0,0,761,759,
1,0,0,0,761,762,1,0,0,0,762,115,1,0,0,0,763,761,1,0,0,0,764,769,3,118,59,
0,765,766,5,58,0,0,766,768,3,118,59,0,767,765,1,0,0,0,768,771,1,0,0,0,769,
767,1,0,0,0,769,770,1,0,0,0,770,117,1,0,0,0,771,769,1,0,0,0,772,779,3,120,
60,0,773,774,5,59,0,0,774,778,3,120,60,0,775,776,5,60,0,0,776,778,3,120,
60,0,777,773,1,0,0,0,777,775,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,
780,1,0,0,0,780,119,1,0,0,0,781,779,1,0,0,0,782,789,3,122,61,0,783,784,5,
61,0,0,784,788,3,122,61,0,785,786,5,62,0,0,786,788,3,122,61,0,787,783,1,
0,0,0,787,785,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,
121,1,0,0,0,791,789,1,0,0,0,792,805,3,124,62,0,793,794,5,46,0,0,794,804,
3,124,62,0,795,796,5,63,0,0,796,804,3,124,62,0,797,798,5,64,0,0,798,804,
3,124,62,0,799,800,5,65,0,0,800,804,3,124,62,0,801,802,5,76,0,0,802,804,
3,124,62,0,803,793,1,0,0,0,803,795,1,0,0,0,803,797,1,0,0,0,803,799,1,0,0,
0,803,801,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,123,
1,0,0,0,807,805,1,0,0,0,808,809,5,61,0,0,809,816,3,124,62,0,810,811,5,62,
0,0,811,816,3,124,62,0,812,813,5,66,0,0,813,816,3,124,62,0,814,816,3,126,
63,0,815,808,1,0,0,0,815,810,1,0,0,0,815,812,1,0,0,0,815,814,1,0,0,0,816,
125,1,0,0,0,817,821,3,128,64,0,818,820,3,132,66,0,819,818,1,0,0,0,820,823,
1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,826,1,0,0,0,823,821,1,0,0,0,
824,825,5,52,0,0,825,827,3,124,62,0,826,824,1,0,0,0,826,827,1,0,0,0,827,
127,1,0,0,0,828,831,5,47,0,0,829,832,3,158,79,0,830,832,3,130,65,0,831,829,
1,0,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,0,0,833,856,5,48,0,0,
834,836,5,54,0,0,835,837,3,130,65,0,836,835,1,0,0,0,836,837,1,0,0,0,837,
838,1,0,0,0,838,856,5,55,0,0,839,841,5,67,0,0,840,842,3,144,72,0,841,840,
1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,856,5,68,0,0,844,856,5,35,0,
0,845,856,3,164,82,0,846,848,3,162,81,0,847,846,1,0,0,0,848,849,1,0,0,0,
849,847,1,0,0,0,849,850,1,0,0,0,850,856,1,0,0,0,851,856,5,45,0,0,852,856,
5,25,0,0,853,856,5,26,0,0,854,856,5,27,0,0,855,828,1,0,0,0,855,834,1,0,0,
0,855,839,1,0,0,0,855,844,1,0,0,0,855,845,1,0,0,0,855,847,1,0,0,0,855,851,
1,0,0,0,855,852,1,0,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,129,1,0,0,0,
857,869,3,92,46,0,858,870,3,154,77,0,859,860,5,49,0,0,860,862,3,92,46,0,
861,859,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,867,
1,0,0,0,865,863,1,0,0,0,866,868,5,49,0,0,867,866,1,0,0,0,867,868,1,0,0,0,
868,870,1,0,0,0,869,858,1,0,0,0,869,863,1,0,0,0,870,131,1,0,0,0,871,873,
5,47,0,0,872,874,3,148,74,0,873,872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,
0,0,875,883,5,48,0,0,876,877,5,54,0,0,877,878,3,134,67,0,878,879,5,55,0,
0,879,883,1,0,0,0,880,881,5,44,0,0,881,883,5,35,0,0,882,871,1,0,0,0,882,
876,1,0,0,0,882,880,1,0,0,0,883,133,1,0,0,0,884,889,3,136,68,0,885,886,5,
49,0,0,886,888,3,136,68,0,887,885,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,
0,889,890,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,892,894,5,49,0,0,893,892,
1,0,0,0,893,894,1,0,0,0,894,135,1,0,0,0,895,907,3,92,46,0,896,898,3,92,46,
0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,5,50,0,0,900,902,
3,92,46,0,901,900,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,905,3,138,
69,0,904,903,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,895,1,0,0,0,906,
897,1,0,0,0,907,137,1,0,0,0,908,910,5,50,0,0,909,911,3,92,46,0,910,909,1,
0,0,0,910,911,1,0,0,0,911,139,1,0,0,0,912,917,3,110,55,0,913,914,5,49,0,
0,914,916,3,110,55,0,915,913,1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,917,
918,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,920,922,5,49,0,0,921,920,1,0,
0,0,921,922,1,0,0,0,922,141,1,0,0,0,923,928,3,92,46,0,924,925,5,49,0,0,925,
927,3,92,46,0,926,924,1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,
0,0,0,929,932,1,0,0,0,930,928,1,0,0,0,931,933,5,49,0,0,932,931,1,0,0,0,932,
933,1,0,0,0,933,143,1,0,0,0,934,935,3,92,46,0,935,936,5,50,0,0,936,951,3,
92,46,0,937,952,3,154,77,0,938,939,5,49,0,0,939,940,3,92,46,0,940,941,5,
50,0,0,941,942,3,92,46,0,942,944,1,0,0,0,943,938,1,0,0,0,944,947,1,0,0,0,
945,943,1,0,0,0,945,946,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,948,950,
5,49,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,937,1,0,0,0,
951,945,1,0,0,0,952,968,1,0,0,0,953,965,3,92,46,0,954,966,3,154,77,0,955,
956,5,49,0,0,956,958,3,92,46,0,957,955,1,0,0,0,958,961,1,0,0,0,959,957,1,
0,0,0,959,960,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,962,964,5,49,0,0,963,
962,1,0,0,0,963,964,1,0,0,0,964,966,1,0,0,0,965,954,1,0,0,0,965,959,1,0,
0,0,966,968,1,0,0,0,967,934,1,0,0,0,967,953,1,0,0,0,968,145,1,0,0,0,969,
970,5,28,0,0,970,976,5,35,0,0,971,973,5,47,0,0,972,974,3,148,74,0,973,972,
1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,977,5,48,0,0,976,971,1,0,0,0,
976,977,1,0,0,0,977,978,1,0,0,0,978,979,5,50,0,0,979,980,3,90,45,0,980,147,
1,0,0,0,981,982,3,150,75,0,982,983,5,49,0,0,983,985,1,0,0,0,984,981,1,0,
0,0,985,988,1,0,0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,1009,1,0,0,0,988,
986,1,0,0,0,989,991,3,150,75,0,990,992,5,49,0,0,991,990,1,0,0,0,991,992,
1,0,0,0,992,1010,1,0,0,0,993,994,5,46,0,0,994,999,3,92,46,0,995,996,5,49,
0,0,996,998,3,150,75,0,997,995,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,
999,1000,1,0,0,0,1000,1005,1,0,0,0,1001,999,1,0,0,0,1002,1003,5,49,0,0,1003,
1004,5,52,0,0,1004,1006,3,92,46,0,1005,1002,1,0,0,0,1005,1006,1,0,0,0,1006,
1010,1,0,0,0,1007,1008,5,52,0,0,1008,1010,3,92,46,0,1009,989,1,0,0,0,1009,
993,1,0,0,0,1009,1007,1,0,0,0,1010,149,1,0,0,0,1011,1013,3,92,46,0,1012,
1014,3,154,77,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1020,1,0,0,0,1015,
1016,3,92,46,0,1016,1017,5,53,0,0,1017,1018,3,92,46,0,1018,1020,1,0,0,0,
1019,1011,1,0,0,0,1019,1015,1,0,0,0,1020,151,1,0,0,0,1021,1024,3,154,77,
0,1022,1024,3,156,78,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,153,1,0,
0,0,1025,1026,5,14,0,0,1026,1027,3,140,70,0,1027,1028,5,15,0,0,1028,1030,
3,100,50,0,1029,1031,3,152,76,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,
155,1,0,0,0,1032,1033,5,10,0,0,1033,1035,3,94,47,0,1034,1036,3,152,76,0,
1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,157,1,0,0,0,1037,1039,5,29,0,0,
1038,1040,3,160,80,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,159,1,0,0,
0,1041,1042,5,4,0,0,1042,1045,3,92,46,0,1043,1045,3,142,71,0,1044,1041,1,
0,0,0,1044,1043,1,0,0,0,1045,161,1,0,0,0,1046,1047,7,2,0,0,1047,163,1,0,
0,0,1048,1052,3,166,83,0,1049,1052,5,42,0,0,1050,1052,5,43,0,0,1051,1048,
1,0,0,0,1051,1049,1,0,0,0,1051,1050,1,0,0,0,1052,165,1,0,0,0,1053,1054,7,
3,0,0,1054,167,1,0,0,0,150,173,177,179,188,197,200,207,212,219,226,233,239,
243,249,255,259,265,269,271,275,281,285,291,295,300,305,311,315,321,327,
331,337,341,343,347,353,357,363,367,373,380,384,396,402,407,411,414,418,
423,427,431,445,453,461,463,467,476,483,485,494,499,504,511,515,522,530,
539,548,555,565,578,584,593,604,615,620,625,630,638,647,653,655,663,667,
675,678,682,686,693,703,711,717,725,741,744,753,761,769,777,779,787,789,
803,805,815,821,826,831,836,841,849,855,863,867,869,873,882,889,893,897,
901,904,906,910,917,921,928,932,945,949,951,959,963,965,967,973,976,986,
991,999,1005,1009,1013,1019,1023,1030,1035,1039,1044,1051];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Python3Parser extends antlr4.Parser {

    static grammarFileName = "Python3.g4";
    static literalNames = [ null, "'def'", "'return'", "'raise'", "'from'", 
                            "'import'", "'as'", "'global'", "'nonlocal'", 
                            "'assert'", "'if'", "'elif'", "'else'", "'while'", 
                            "'for'", "'in'", "'try'", "'finally'", "'with'", 
                            "'except'", "'lambda'", "'or'", "'and'", "'not'", 
                            "'is'", "'None'", "'True'", "'False'", "'class'", 
                            "'yield'", "'del'", "'pass'", "'continue'", 
                            "'break'", null, null, null, null, null, null, 
                            null, null, null, null, "'.'", "'...'", "'*'", 
                            "'('", "')'", "','", "':'", "';'", "'**'", "'='", 
                            "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                            "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", 
                            "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", 
                            "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                            "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                            "'^='", "'<<='", "'>>='", "'**='", "'//='" ];
    static symbolicNames = [ null, "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
                             "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", 
                             "ELIF", "ELSE", "WHILE", "FOR", "IN", "TRY", 
                             "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", 
                             "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", 
                             "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", 
                             "BREAK", "NEWLINE", "NAME", "STRING_LITERAL", 
                             "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                             "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
                             "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
                             "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", 
                             "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                             "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                             "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", 
                             "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", 
                             "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
                             "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                             "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                             "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                             "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                             "SKIP_", "UNKNOWN_CHAR", "INDENT", "DEDENT" ];
    static ruleNames = [ "single_input", "file_input", "eval_input", "decorator", 
                         "decorators", "decorated", "funcdef", "parameters", 
                         "typedargslist", "tfpdef", "varargslist", "vfpdef", 
                         "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                         "testlist_star_expr", "augassign", "del_stmt", 
                         "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                         "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                         "import_name", "import_from", "import_as_name", 
                         "dotted_as_name", "import_as_names", "dotted_as_names", 
                         "dotted_name", "global_stmt", "nonlocal_stmt", 
                         "assert_stmt", "compound_stmt", "if_stmt", "while_stmt", 
                         "for_stmt", "try_stmt", "with_stmt", "with_item", 
                         "except_clause", "suite", "test", "test_nocond", 
                         "lambdef", "lambdef_nocond", "or_test", "and_test", 
                         "not_test", "comparison", "comp_op", "star_expr", 
                         "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                         "term", "factor", "power", "atom", "testlist_comp", 
                         "trailer", "subscriptlist", "subscript", "sliceop", 
                         "exprlist", "testlist", "dictorsetmaker", "classdef", 
                         "arglist", "argument", "comp_iter", "comp_for", 
                         "comp_if", "yield_expr", "yield_arg", "str", "number", 
                         "integer" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Python3Parser.ruleNames;
        this.literalNames = Python3Parser.literalNames;
        this.symbolicNames = Python3Parser.symbolicNames;
    }



	single_input() {
	    let localctx = new Single_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Python3Parser.RULE_single_input);
	    try {
	        this.state = 173;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 168;
	            this.match(Python3Parser.NEWLINE);
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 7:
	        case 8:
	        case 9:
	        case 20:
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 169;
	            this.simple_stmt();
	            break;
	        case 1:
	        case 10:
	        case 13:
	        case 14:
	        case 16:
	        case 18:
	        case 28:
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 170;
	            this.compound_stmt();
	            this.state = 171;
	            this.match(Python3Parser.NEWLINE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_input() {
	    let localctx = new File_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Python3Parser.RULE_file_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4271204286) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1614868479) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1027) !== 0)) {
	            this.state = 177;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 34:
	                this.state = 175;
	                this.match(Python3Parser.NEWLINE);
	                break;
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 13:
	            case 14:
	            case 16:
	            case 18:
	            case 20:
	            case 23:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 54:
	            case 61:
	            case 62:
	            case 66:
	            case 67:
	            case 76:
	                this.state = 176;
	                this.stmt();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 182;
	        this.match(Python3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eval_input() {
	    let localctx = new Eval_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Python3Parser.RULE_eval_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 184;
	        this.testlist();
	        this.state = 188;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 185;
	            this.match(Python3Parser.NEWLINE);
	            this.state = 190;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 191;
	        this.match(Python3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorator() {
	    let localctx = new DecoratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Python3Parser.RULE_decorator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.match(Python3Parser.AT);
	        this.state = 194;
	        this.dotted_name();
	        this.state = 200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===47) {
	            this.state = 195;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 50693) !== 0)) {
	                this.state = 196;
	                this.arglist();
	            }

	            this.state = 199;
	            this.match(Python3Parser.CLOSE_PAREN);
	        }

	        this.state = 202;
	        this.match(Python3Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorators() {
	    let localctx = new DecoratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Python3Parser.RULE_decorators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 205; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 204;
	            this.decorator();
	            this.state = 207; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===76);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorated() {
	    let localctx = new DecoratedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Python3Parser.RULE_decorated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this.decorators();
	        this.state = 212;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.state = 210;
	            this.classdef();
	            break;
	        case 1:
	            this.state = 211;
	            this.funcdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcdef() {
	    let localctx = new FuncdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Python3Parser.RULE_funcdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 214;
	        this.match(Python3Parser.DEF);
	        this.state = 215;
	        this.match(Python3Parser.NAME);
	        this.state = 216;
	        this.parameters();
	        this.state = 219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===77) {
	            this.state = 217;
	            this.match(Python3Parser.ARROW);
	            this.state = 218;
	            this.test();
	        }

	        this.state = 221;
	        this.match(Python3Parser.COLON);
	        this.state = 222;
	        this.suite();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Python3Parser.RULE_parameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(Python3Parser.OPEN_PAREN);
	        this.state = 226;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 133121) !== 0)) {
	            this.state = 225;
	            this.typedargslist();
	        }

	        this.state = 228;
	        this.match(Python3Parser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedargslist() {
	    let localctx = new TypedargslistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Python3Parser.RULE_typedargslist);
	    var _la = 0;
	    try {
	        this.state = 295;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 230;
	            this.tfpdef();
	            this.state = 233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 231;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 232;
	                this.test();
	            }

	            this.state = 243;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 235;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 236;
	                    this.tfpdef();
	                    this.state = 239;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===53) {
	                        this.state = 237;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 238;
	                        this.test();
	                    }
	             
	                }
	                this.state = 245;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	            }

	            this.state = 271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 246;
	                this.match(Python3Parser.COMMA);
	                this.state = 269;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 46:
	                	this.state = 247;
	                	this.match(Python3Parser.STAR);
	                	this.state = 249;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===35) {
	                	    this.state = 248;
	                	    this.tfpdef();
	                	}

	                	this.state = 259;
	                	this._errHandler.sync(this);
	                	var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                	    if(_alt===1) {
	                	        this.state = 251;
	                	        this.match(Python3Parser.COMMA);
	                	        this.state = 252;
	                	        this.tfpdef();
	                	        this.state = 255;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===53) {
	                	            this.state = 253;
	                	            this.match(Python3Parser.ASSIGN);
	                	            this.state = 254;
	                	            this.test();
	                	        }
	                	 
	                	    }
	                	    this.state = 261;
	                	    this._errHandler.sync(this);
	                	    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	                	}

	                	this.state = 265;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===49) {
	                	    this.state = 262;
	                	    this.match(Python3Parser.COMMA);
	                	    this.state = 263;
	                	    this.match(Python3Parser.POWER);
	                	    this.state = 264;
	                	    this.tfpdef();
	                	}

	                	break;
	                case 52:
	                	this.state = 267;
	                	this.match(Python3Parser.POWER);
	                	this.state = 268;
	                	this.tfpdef();
	                	break;
	                case 48:
	                	break;
	                default:
	                	break;
	                }
	            }

	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 273;
	            this.match(Python3Parser.STAR);
	            this.state = 275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 274;
	                this.tfpdef();
	            }

	            this.state = 285;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 277;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 278;
	                    this.tfpdef();
	                    this.state = 281;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===53) {
	                        this.state = 279;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 280;
	                        this.test();
	                    }
	             
	                }
	                this.state = 287;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	            }

	            this.state = 291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 288;
	                this.match(Python3Parser.COMMA);
	                this.state = 289;
	                this.match(Python3Parser.POWER);
	                this.state = 290;
	                this.tfpdef();
	            }

	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 293;
	            this.match(Python3Parser.POWER);
	            this.state = 294;
	            this.tfpdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tfpdef() {
	    let localctx = new TfpdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Python3Parser.RULE_tfpdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.match(Python3Parser.NAME);
	        this.state = 300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50) {
	            this.state = 298;
	            this.match(Python3Parser.COLON);
	            this.state = 299;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varargslist() {
	    let localctx = new VarargslistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Python3Parser.RULE_varargslist);
	    var _la = 0;
	    try {
	        this.state = 367;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 302;
	            this.vfpdef();
	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 303;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 304;
	                this.test();
	            }

	            this.state = 315;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 307;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 308;
	                    this.vfpdef();
	                    this.state = 311;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===53) {
	                        this.state = 309;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 310;
	                        this.test();
	                    }
	             
	                }
	                this.state = 317;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	            }

	            this.state = 343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 318;
	                this.match(Python3Parser.COMMA);
	                this.state = 341;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 46:
	                	this.state = 319;
	                	this.match(Python3Parser.STAR);
	                	this.state = 321;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===35) {
	                	    this.state = 320;
	                	    this.vfpdef();
	                	}

	                	this.state = 331;
	                	this._errHandler.sync(this);
	                	var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                	    if(_alt===1) {
	                	        this.state = 323;
	                	        this.match(Python3Parser.COMMA);
	                	        this.state = 324;
	                	        this.vfpdef();
	                	        this.state = 327;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===53) {
	                	            this.state = 325;
	                	            this.match(Python3Parser.ASSIGN);
	                	            this.state = 326;
	                	            this.test();
	                	        }
	                	 
	                	    }
	                	    this.state = 333;
	                	    this._errHandler.sync(this);
	                	    _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	                	}

	                	this.state = 337;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===49) {
	                	    this.state = 334;
	                	    this.match(Python3Parser.COMMA);
	                	    this.state = 335;
	                	    this.match(Python3Parser.POWER);
	                	    this.state = 336;
	                	    this.vfpdef();
	                	}

	                	break;
	                case 52:
	                	this.state = 339;
	                	this.match(Python3Parser.POWER);
	                	this.state = 340;
	                	this.vfpdef();
	                	break;
	                case 50:
	                	break;
	                default:
	                	break;
	                }
	            }

	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 345;
	            this.match(Python3Parser.STAR);
	            this.state = 347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 346;
	                this.vfpdef();
	            }

	            this.state = 357;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 349;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 350;
	                    this.vfpdef();
	                    this.state = 353;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===53) {
	                        this.state = 351;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 352;
	                        this.test();
	                    }
	             
	                }
	                this.state = 359;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	            }

	            this.state = 363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 360;
	                this.match(Python3Parser.COMMA);
	                this.state = 361;
	                this.match(Python3Parser.POWER);
	                this.state = 362;
	                this.vfpdef();
	            }

	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 365;
	            this.match(Python3Parser.POWER);
	            this.state = 366;
	            this.vfpdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vfpdef() {
	    let localctx = new VfpdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Python3Parser.RULE_vfpdef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 369;
	        this.match(Python3Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Python3Parser.RULE_stmt);
	    try {
	        this.state = 373;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 7:
	        case 8:
	        case 9:
	        case 20:
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 371;
	            this.simple_stmt();
	            break;
	        case 1:
	        case 10:
	        case 13:
	        case 14:
	        case 16:
	        case 18:
	        case 28:
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 372;
	            this.compound_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_stmt() {
	    let localctx = new Simple_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Python3Parser.RULE_simple_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        this.small_stmt();
	        this.state = 380;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 376;
	                this.match(Python3Parser.SEMI_COLON);
	                this.state = 377;
	                this.small_stmt(); 
	            }
	            this.state = 382;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 383;
	            this.match(Python3Parser.SEMI_COLON);
	        }

	        this.state = 386;
	        this.match(Python3Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	small_stmt() {
	    let localctx = new Small_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Python3Parser.RULE_small_stmt);
	    try {
	        this.state = 396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 388;
	            this.expr_stmt();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 389;
	            this.del_stmt();
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 390;
	            this.pass_stmt();
	            break;
	        case 2:
	        case 3:
	        case 29:
	        case 32:
	        case 33:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 391;
	            this.flow_stmt();
	            break;
	        case 4:
	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 392;
	            this.import_stmt();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 393;
	            this.global_stmt();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 394;
	            this.nonlocal_stmt();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 395;
	            this.assert_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_stmt() {
	    let localctx = new Expr_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Python3Parser.RULE_expr_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.testlist_star_expr();
	        this.state = 414;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	            this.state = 399;
	            this.augassign();
	            this.state = 402;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 29:
	                this.state = 400;
	                this.yield_expr();
	                break;
	            case 20:
	            case 23:
	            case 25:
	            case 26:
	            case 27:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 54:
	            case 61:
	            case 62:
	            case 66:
	            case 67:
	                this.state = 401;
	                this.testlist();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 34:
	        case 51:
	        case 53:
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===53) {
	                this.state = 404;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 407;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 29:
	                    this.state = 405;
	                    this.yield_expr();
	                    break;
	                case 20:
	                case 23:
	                case 25:
	                case 26:
	                case 27:
	                case 35:
	                case 36:
	                case 37:
	                case 38:
	                case 39:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 45:
	                case 46:
	                case 47:
	                case 54:
	                case 61:
	                case 62:
	                case 66:
	                case 67:
	                    this.state = 406;
	                    this.testlist_star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 413;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist_star_expr() {
	    let localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Python3Parser.RULE_testlist_star_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 416;
	            this.test();
	            break;

	        case 2:
	            this.state = 417;
	            this.star_expr();
	            break;

	        }
	        this.state = 427;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 420;
	                this.match(Python3Parser.COMMA);
	                this.state = 423;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 421;
	                    this.test();
	                    break;

	                case 2:
	                    this.state = 422;
	                    this.star_expr();
	                    break;

	                } 
	            }
	            this.state = 429;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	        this.state = 431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 430;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	augassign() {
	    let localctx = new AugassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Python3Parser.RULE_augassign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        _la = this._input.LA(1);
	        if(!(((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 8191) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	del_stmt() {
	    let localctx = new Del_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Python3Parser.RULE_del_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 435;
	        this.match(Python3Parser.DEL);
	        this.state = 436;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pass_stmt() {
	    let localctx = new Pass_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Python3Parser.RULE_pass_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 438;
	        this.match(Python3Parser.PASS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_stmt() {
	    let localctx = new Flow_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Python3Parser.RULE_flow_stmt);
	    try {
	        this.state = 445;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 440;
	            this.break_stmt();
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 441;
	            this.continue_stmt();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 442;
	            this.return_stmt();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 443;
	            this.raise_stmt();
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 444;
	            this.yield_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_stmt() {
	    let localctx = new Break_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Python3Parser.RULE_break_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(Python3Parser.BREAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continue_stmt() {
	    let localctx = new Continue_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Python3Parser.RULE_continue_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.match(Python3Parser.CONTINUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_stmt() {
	    let localctx = new Return_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Python3Parser.RULE_return_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this.match(Python3Parser.RETURN);
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	            this.state = 452;
	            this.testlist();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_stmt() {
	    let localctx = new Yield_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Python3Parser.RULE_yield_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.yield_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_stmt() {
	    let localctx = new Raise_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Python3Parser.RULE_raise_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(Python3Parser.RAISE);
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	            this.state = 458;
	            this.test();
	            this.state = 461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 459;
	                this.match(Python3Parser.FROM);
	                this.state = 460;
	                this.test();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_stmt() {
	    let localctx = new Import_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Python3Parser.RULE_import_stmt);
	    try {
	        this.state = 467;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 465;
	            this.import_name();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 466;
	            this.import_from();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_name() {
	    let localctx = new Import_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Python3Parser.RULE_import_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this.match(Python3Parser.IMPORT);
	        this.state = 470;
	        this.dotted_as_names();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from() {
	    let localctx = new Import_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Python3Parser.RULE_import_from);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.match(Python3Parser.FROM);
	        this.state = 485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===44 || _la===45) {
	                this.state = 473;
	                _la = this._input.LA(1);
	                if(!(_la===44 || _la===45)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 478;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 479;
	            this.dotted_name();
	            break;

	        case 2:
	            this.state = 481; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 480;
	                _la = this._input.LA(1);
	                if(!(_la===44 || _la===45)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 483; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===44 || _la===45);
	            break;

	        }
	        this.state = 487;
	        this.match(Python3Parser.IMPORT);
	        this.state = 494;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.state = 488;
	            this.match(Python3Parser.STAR);
	            break;
	        case 47:
	            this.state = 489;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 490;
	            this.import_as_names();
	            this.state = 491;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 35:
	            this.state = 493;
	            this.import_as_names();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as_name() {
	    let localctx = new Import_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Python3Parser.RULE_import_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(Python3Parser.NAME);
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 497;
	            this.match(Python3Parser.AS);
	            this.state = 498;
	            this.match(Python3Parser.NAME);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_name() {
	    let localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Python3Parser.RULE_dotted_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.dotted_name();
	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 502;
	            this.match(Python3Parser.AS);
	            this.state = 503;
	            this.match(Python3Parser.NAME);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as_names() {
	    let localctx = new Import_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Python3Parser.RULE_import_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this.import_as_name();
	        this.state = 511;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 507;
	                this.match(Python3Parser.COMMA);
	                this.state = 508;
	                this.import_as_name(); 
	            }
	            this.state = 513;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	        }

	        this.state = 515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 514;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_names() {
	    let localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Python3Parser.RULE_dotted_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this.dotted_as_name();
	        this.state = 522;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 518;
	            this.match(Python3Parser.COMMA);
	            this.state = 519;
	            this.dotted_as_name();
	            this.state = 524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_name() {
	    let localctx = new Dotted_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Python3Parser.RULE_dotted_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this.match(Python3Parser.NAME);
	        this.state = 530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===44) {
	            this.state = 526;
	            this.match(Python3Parser.DOT);
	            this.state = 527;
	            this.match(Python3Parser.NAME);
	            this.state = 532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_stmt() {
	    let localctx = new Global_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Python3Parser.RULE_global_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(Python3Parser.GLOBAL);
	        this.state = 534;
	        this.match(Python3Parser.NAME);
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 535;
	            this.match(Python3Parser.COMMA);
	            this.state = 536;
	            this.match(Python3Parser.NAME);
	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonlocal_stmt() {
	    let localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Python3Parser.RULE_nonlocal_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this.match(Python3Parser.NONLOCAL);
	        this.state = 543;
	        this.match(Python3Parser.NAME);
	        this.state = 548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 544;
	            this.match(Python3Parser.COMMA);
	            this.state = 545;
	            this.match(Python3Parser.NAME);
	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assert_stmt() {
	    let localctx = new Assert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Python3Parser.RULE_assert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.match(Python3Parser.ASSERT);
	        this.state = 552;
	        this.test();
	        this.state = 555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 553;
	            this.match(Python3Parser.COMMA);
	            this.state = 554;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_stmt() {
	    let localctx = new Compound_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Python3Parser.RULE_compound_stmt);
	    try {
	        this.state = 565;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 557;
	            this.if_stmt();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 558;
	            this.while_stmt();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 559;
	            this.for_stmt();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 560;
	            this.try_stmt();
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 561;
	            this.with_stmt();
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 562;
	            this.funcdef();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 563;
	            this.classdef();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 564;
	            this.decorated();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Python3Parser.RULE_if_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.match(Python3Parser.IF);
	        this.state = 568;
	        this.test();
	        this.state = 569;
	        this.match(Python3Parser.COLON);
	        this.state = 570;
	        this.suite();
	        this.state = 578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===11) {
	            this.state = 571;
	            this.match(Python3Parser.ELIF);
	            this.state = 572;
	            this.test();
	            this.state = 573;
	            this.match(Python3Parser.COLON);
	            this.state = 574;
	            this.suite();
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 581;
	            this.match(Python3Parser.ELSE);
	            this.state = 582;
	            this.match(Python3Parser.COLON);
	            this.state = 583;
	            this.suite();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_stmt() {
	    let localctx = new While_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Python3Parser.RULE_while_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        this.match(Python3Parser.WHILE);
	        this.state = 587;
	        this.test();
	        this.state = 588;
	        this.match(Python3Parser.COLON);
	        this.state = 589;
	        this.suite();
	        this.state = 593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 590;
	            this.match(Python3Parser.ELSE);
	            this.state = 591;
	            this.match(Python3Parser.COLON);
	            this.state = 592;
	            this.suite();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Python3Parser.RULE_for_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this.match(Python3Parser.FOR);
	        this.state = 596;
	        this.exprlist();
	        this.state = 597;
	        this.match(Python3Parser.IN);
	        this.state = 598;
	        this.testlist();
	        this.state = 599;
	        this.match(Python3Parser.COLON);
	        this.state = 600;
	        this.suite();
	        this.state = 604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 601;
	            this.match(Python3Parser.ELSE);
	            this.state = 602;
	            this.match(Python3Parser.COLON);
	            this.state = 603;
	            this.suite();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_stmt() {
	    let localctx = new Try_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Python3Parser.RULE_try_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.match(Python3Parser.TRY);
	        this.state = 607;
	        this.match(Python3Parser.COLON);
	        this.state = 608;
	        this.suite();
	        this.state = 630;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.state = 613; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 609;
	                this.except_clause();
	                this.state = 610;
	                this.match(Python3Parser.COLON);
	                this.state = 611;
	                this.suite();
	                this.state = 615; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===19);
	            this.state = 620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 617;
	                this.match(Python3Parser.ELSE);
	                this.state = 618;
	                this.match(Python3Parser.COLON);
	                this.state = 619;
	                this.suite();
	            }

	            this.state = 625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 622;
	                this.match(Python3Parser.FINALLY);
	                this.state = 623;
	                this.match(Python3Parser.COLON);
	                this.state = 624;
	                this.suite();
	            }

	            break;
	        case 17:
	            this.state = 627;
	            this.match(Python3Parser.FINALLY);
	            this.state = 628;
	            this.match(Python3Parser.COLON);
	            this.state = 629;
	            this.suite();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_stmt() {
	    let localctx = new With_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Python3Parser.RULE_with_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(Python3Parser.WITH);
	        this.state = 633;
	        this.with_item();
	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 634;
	            this.match(Python3Parser.COMMA);
	            this.state = 635;
	            this.with_item();
	            this.state = 640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 641;
	        this.match(Python3Parser.COLON);
	        this.state = 642;
	        this.suite();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_item() {
	    let localctx = new With_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Python3Parser.RULE_with_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.test();
	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 645;
	            this.match(Python3Parser.AS);
	            this.state = 646;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	except_clause() {
	    let localctx = new Except_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Python3Parser.RULE_except_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.match(Python3Parser.EXCEPT);
	        this.state = 655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	            this.state = 650;
	            this.test();
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 651;
	                this.match(Python3Parser.AS);
	                this.state = 652;
	                this.match(Python3Parser.NAME);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	suite() {
	    let localctx = new SuiteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Python3Parser.RULE_suite);
	    var _la = 0;
	    try {
	        this.state = 667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 7:
	        case 8:
	        case 9:
	        case 20:
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 657;
	            this.simple_stmt();
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this.match(Python3Parser.NEWLINE);
	            this.state = 659;
	            this.match(Python3Parser.INDENT);
	            this.state = 661; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 660;
	                this.stmt();
	                this.state = 663; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4271204286) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1614868475) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1027) !== 0));
	            this.state = 665;
	            this.match(Python3Parser.DEDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test() {
	    let localctx = new TestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Python3Parser.RULE_test);
	    var _la = 0;
	    try {
	        this.state = 678;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 669;
	            this.or_test();
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10) {
	                this.state = 670;
	                this.match(Python3Parser.IF);
	                this.state = 671;
	                this.or_test();
	                this.state = 672;
	                this.match(Python3Parser.ELSE);
	                this.state = 673;
	                this.test();
	            }

	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 677;
	            this.lambdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_nocond() {
	    let localctx = new Test_nocondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Python3Parser.RULE_test_nocond);
	    try {
	        this.state = 682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 680;
	            this.or_test();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 681;
	            this.lambdef_nocond();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef() {
	    let localctx = new LambdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Python3Parser.RULE_lambdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.match(Python3Parser.LAMBDA);
	        this.state = 686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 133121) !== 0)) {
	            this.state = 685;
	            this.varargslist();
	        }

	        this.state = 688;
	        this.match(Python3Parser.COLON);
	        this.state = 689;
	        this.test();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef_nocond() {
	    let localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Python3Parser.RULE_lambdef_nocond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        this.match(Python3Parser.LAMBDA);
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 133121) !== 0)) {
	            this.state = 692;
	            this.varargslist();
	        }

	        this.state = 695;
	        this.match(Python3Parser.COLON);
	        this.state = 696;
	        this.test_nocond();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_test() {
	    let localctx = new Or_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Python3Parser.RULE_or_test);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.and_test();
	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===21) {
	            this.state = 699;
	            this.match(Python3Parser.OR);
	            this.state = 700;
	            this.and_test();
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_test() {
	    let localctx = new And_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Python3Parser.RULE_and_test);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 706;
	        this.not_test();
	        this.state = 711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 707;
	            this.match(Python3Parser.AND);
	            this.state = 708;
	            this.not_test();
	            this.state = 713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not_test() {
	    let localctx = new Not_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Python3Parser.RULE_not_test);
	    try {
	        this.state = 717;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 714;
	            this.match(Python3Parser.NOT);
	            this.state = 715;
	            this.not_test();
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 716;
	            this.comparison();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison() {
	    let localctx = new ComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Python3Parser.RULE_comparison);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719;
	        this.star_expr();
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 25198592) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 127) !== 0)) {
	            this.state = 720;
	            this.comp_op();
	            this.state = 721;
	            this.star_expr();
	            this.state = 727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_op() {
	    let localctx = new Comp_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Python3Parser.RULE_comp_op);
	    try {
	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 728;
	            this.match(Python3Parser.LESS_THAN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 729;
	            this.match(Python3Parser.GREATER_THAN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 730;
	            this.match(Python3Parser.EQUALS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 731;
	            this.match(Python3Parser.GT_EQ);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 732;
	            this.match(Python3Parser.LT_EQ);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 733;
	            this.match(Python3Parser.NOT_EQ_1);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 734;
	            this.match(Python3Parser.NOT_EQ_2);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 735;
	            this.match(Python3Parser.IN);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 736;
	            this.match(Python3Parser.NOT);
	            this.state = 737;
	            this.match(Python3Parser.IN);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 738;
	            this.match(Python3Parser.IS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 739;
	            this.match(Python3Parser.IS);
	            this.state = 740;
	            this.match(Python3Parser.NOT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_expr() {
	    let localctx = new Star_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Python3Parser.RULE_star_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46) {
	            this.state = 743;
	            this.match(Python3Parser.STAR);
	        }

	        this.state = 746;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Python3Parser.RULE_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.xor_expr();
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===56) {
	            this.state = 749;
	            this.match(Python3Parser.OR_OP);
	            this.state = 750;
	            this.xor_expr();
	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xor_expr() {
	    let localctx = new Xor_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Python3Parser.RULE_xor_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 756;
	        this.and_expr();
	        this.state = 761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===57) {
	            this.state = 757;
	            this.match(Python3Parser.XOR);
	            this.state = 758;
	            this.and_expr();
	            this.state = 763;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_expr() {
	    let localctx = new And_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Python3Parser.RULE_and_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this.shift_expr();
	        this.state = 769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===58) {
	            this.state = 765;
	            this.match(Python3Parser.AND_OP);
	            this.state = 766;
	            this.shift_expr();
	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_expr() {
	    let localctx = new Shift_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Python3Parser.RULE_shift_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this.arith_expr();
	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===59 || _la===60) {
	            this.state = 777;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 59:
	                this.state = 773;
	                this.match(Python3Parser.LEFT_SHIFT);
	                this.state = 774;
	                this.arith_expr();
	                break;
	            case 60:
	                this.state = 775;
	                this.match(Python3Parser.RIGHT_SHIFT);
	                this.state = 776;
	                this.arith_expr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arith_expr() {
	    let localctx = new Arith_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Python3Parser.RULE_arith_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782;
	        this.term();
	        this.state = 789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===61 || _la===62) {
	            this.state = 787;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 61:
	                this.state = 783;
	                this.match(Python3Parser.ADD);
	                this.state = 784;
	                this.term();
	                break;
	            case 62:
	                this.state = 785;
	                this.match(Python3Parser.MINUS);
	                this.state = 786;
	                this.term();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Python3Parser.RULE_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 792;
	        this.factor();
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 1074659329) !== 0)) {
	            this.state = 803;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 46:
	                this.state = 793;
	                this.match(Python3Parser.STAR);
	                this.state = 794;
	                this.factor();
	                break;
	            case 63:
	                this.state = 795;
	                this.match(Python3Parser.DIV);
	                this.state = 796;
	                this.factor();
	                break;
	            case 64:
	                this.state = 797;
	                this.match(Python3Parser.MOD);
	                this.state = 798;
	                this.factor();
	                break;
	            case 65:
	                this.state = 799;
	                this.match(Python3Parser.IDIV);
	                this.state = 800;
	                this.factor();
	                break;
	            case 76:
	                this.state = 801;
	                this.match(Python3Parser.AT);
	                this.state = 802;
	                this.factor();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Python3Parser.RULE_factor);
	    try {
	        this.state = 815;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 808;
	            this.match(Python3Parser.ADD);
	            this.state = 809;
	            this.factor();
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 810;
	            this.match(Python3Parser.MINUS);
	            this.state = 811;
	            this.factor();
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 812;
	            this.match(Python3Parser.NOT_OP);
	            this.state = 813;
	            this.factor();
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 47:
	        case 54:
	        case 67:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 814;
	            this.power();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	power() {
	    let localctx = new PowerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Python3Parser.RULE_power);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.atom();
	        this.state = 821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1033) !== 0)) {
	            this.state = 818;
	            this.trailer();
	            this.state = 823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 824;
	            this.match(Python3Parser.POWER);
	            this.state = 825;
	            this.factor();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Python3Parser.RULE_atom);
	    var _la = 0;
	    try {
	        this.state = 855;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 828;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 831;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 29:
	            	this.state = 829;
	            	this.yield_expr();
	            	break;
	            case 20:
	            case 23:
	            case 25:
	            case 26:
	            case 27:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 54:
	            case 61:
	            case 62:
	            case 66:
	            case 67:
	            	this.state = 830;
	            	this.testlist_comp();
	            	break;
	            case 48:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 833;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 834;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	                this.state = 835;
	                this.testlist_comp();
	            }

	            this.state = 838;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 839;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	                this.state = 840;
	                this.dictorsetmaker();
	            }

	            this.state = 843;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 844;
	            this.match(Python3Parser.NAME);
	            break;
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 845;
	            this.number();
	            break;
	        case 36:
	        case 37:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 847; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 846;
	                this.str();
	                this.state = 849; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===36 || _la===37);
	            break;
	        case 45:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 851;
	            this.match(Python3Parser.ELLIPSIS);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 852;
	            this.match(Python3Parser.NONE);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 853;
	            this.match(Python3Parser.TRUE);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 854;
	            this.match(Python3Parser.FALSE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist_comp() {
	    let localctx = new Testlist_compContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Python3Parser.RULE_testlist_comp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 857;
	        this.test();
	        this.state = 869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.state = 858;
	            this.comp_for();
	            break;
	        case 48:
	        case 49:
	        case 55:
	            this.state = 863;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 859;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 860;
	                    this.test(); 
	                }
	                this.state = 865;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	            }

	            this.state = 867;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 866;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailer() {
	    let localctx = new TrailerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Python3Parser.RULE_trailer);
	    var _la = 0;
	    try {
	        this.state = 882;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 871;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 873;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 50693) !== 0)) {
	                this.state = 872;
	                this.arglist();
	            }

	            this.state = 875;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 876;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 877;
	            this.subscriptlist();
	            this.state = 878;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 880;
	            this.match(Python3Parser.DOT);
	            this.state = 881;
	            this.match(Python3Parser.NAME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscriptlist() {
	    let localctx = new SubscriptlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Python3Parser.RULE_subscriptlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this.subscript();
	        this.state = 889;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 885;
	                this.match(Python3Parser.COMMA);
	                this.state = 886;
	                this.subscript(); 
	            }
	            this.state = 891;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	        this.state = 893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 892;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript() {
	    let localctx = new SubscriptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Python3Parser.RULE_subscript);
	    var _la = 0;
	    try {
	        this.state = 906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.test();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	                this.state = 896;
	                this.test();
	            }

	            this.state = 899;
	            this.match(Python3Parser.COLON);
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	                this.state = 900;
	                this.test();
	            }

	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===50) {
	                this.state = 903;
	                this.sliceop();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sliceop() {
	    let localctx = new SliceopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Python3Parser.RULE_sliceop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(Python3Parser.COLON);
	        this.state = 910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 12673) !== 0)) {
	            this.state = 909;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprlist() {
	    let localctx = new ExprlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Python3Parser.RULE_exprlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 912;
	        this.star_expr();
	        this.state = 917;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,124,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 913;
	                this.match(Python3Parser.COMMA);
	                this.state = 914;
	                this.star_expr(); 
	            }
	            this.state = 919;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,124,this._ctx);
	        }

	        this.state = 921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 920;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist() {
	    let localctx = new TestlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Python3Parser.RULE_testlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 923;
	        this.test();
	        this.state = 928;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 924;
	                this.match(Python3Parser.COMMA);
	                this.state = 925;
	                this.test(); 
	            }
	            this.state = 930;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
	        }

	        this.state = 932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 931;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictorsetmaker() {
	    let localctx = new DictorsetmakerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Python3Parser.RULE_dictorsetmaker);
	    var _la = 0;
	    try {
	        this.state = 967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 934;
	            this.test();
	            this.state = 935;
	            this.match(Python3Parser.COLON);
	            this.state = 936;
	            this.test();
	            this.state = 951;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 14:
	                this.state = 937;
	                this.comp_for();
	                break;
	            case 49:
	            case 68:
	                this.state = 945;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 938;
	                        this.match(Python3Parser.COMMA);
	                        this.state = 939;
	                        this.test();
	                        this.state = 940;
	                        this.match(Python3Parser.COLON);
	                        this.state = 941;
	                        this.test(); 
	                    }
	                    this.state = 947;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	                }

	                this.state = 949;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===49) {
	                    this.state = 948;
	                    this.match(Python3Parser.COMMA);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 953;
	            this.test();
	            this.state = 965;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 14:
	                this.state = 954;
	                this.comp_for();
	                break;
	            case 49:
	            case 68:
	                this.state = 959;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 955;
	                        this.match(Python3Parser.COMMA);
	                        this.state = 956;
	                        this.test(); 
	                    }
	                    this.state = 961;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
	                }

	                this.state = 963;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===49) {
	                    this.state = 962;
	                    this.match(Python3Parser.COMMA);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classdef() {
	    let localctx = new ClassdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Python3Parser.RULE_classdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.match(Python3Parser.CLASS);
	        this.state = 970;
	        this.match(Python3Parser.NAME);
	        this.state = 976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===47) {
	            this.state = 971;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 973;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 251625705) !== 0) || ((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 50693) !== 0)) {
	                this.state = 972;
	                this.arglist();
	            }

	            this.state = 975;
	            this.match(Python3Parser.CLOSE_PAREN);
	        }

	        this.state = 978;
	        this.match(Python3Parser.COLON);
	        this.state = 979;
	        this.suite();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arglist() {
	    let localctx = new ArglistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Python3Parser.RULE_arglist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 986;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 981;
	                this.argument();
	                this.state = 982;
	                this.match(Python3Parser.COMMA); 
	            }
	            this.state = 988;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
	        }

	        this.state = 1009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 989;
	            this.argument();
	            this.state = 991;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 990;
	                this.match(Python3Parser.COMMA);
	            }

	            break;

	        case 2:
	            this.state = 993;
	            this.match(Python3Parser.STAR);
	            this.state = 994;
	            this.test();
	            this.state = 999;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 995;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 996;
	                    this.argument(); 
	                }
	                this.state = 1001;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
	            }

	            this.state = 1005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 1002;
	                this.match(Python3Parser.COMMA);
	                this.state = 1003;
	                this.match(Python3Parser.POWER);
	                this.state = 1004;
	                this.test();
	            }

	            break;

	        case 3:
	            this.state = 1007;
	            this.match(Python3Parser.POWER);
	            this.state = 1008;
	            this.test();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Python3Parser.RULE_argument);
	    var _la = 0;
	    try {
	        this.state = 1019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1011;
	            this.test();
	            this.state = 1013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===14) {
	                this.state = 1012;
	                this.comp_for();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1015;
	            this.test();
	            this.state = 1016;
	            this.match(Python3Parser.ASSIGN);
	            this.state = 1017;
	            this.test();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_iter() {
	    let localctx = new Comp_iterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Python3Parser.RULE_comp_iter);
	    try {
	        this.state = 1023;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1021;
	            this.comp_for();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1022;
	            this.comp_if();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_for() {
	    let localctx = new Comp_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Python3Parser.RULE_comp_for);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1025;
	        this.match(Python3Parser.FOR);
	        this.state = 1026;
	        this.exprlist();
	        this.state = 1027;
	        this.match(Python3Parser.IN);
	        this.state = 1028;
	        this.or_test();
	        this.state = 1030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===14) {
	            this.state = 1029;
	            this.comp_iter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_if() {
	    let localctx = new Comp_ifContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Python3Parser.RULE_comp_if);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1032;
	        this.match(Python3Parser.IF);
	        this.state = 1033;
	        this.test_nocond();
	        this.state = 1035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===14) {
	            this.state = 1034;
	            this.comp_iter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_expr() {
	    let localctx = new Yield_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Python3Parser.RULE_yield_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.match(Python3Parser.YIELD);
	        this.state = 1039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 4)) & ~0x1f) === 0 && ((1 << (_la - 4)) & 2162753537) !== 0) || ((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 3322154751) !== 0)) {
	            this.state = 1038;
	            this.yield_arg();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_arg() {
	    let localctx = new Yield_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Python3Parser.RULE_yield_arg);
	    try {
	        this.state = 1044;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1041;
	            this.match(Python3Parser.FROM);
	            this.state = 1042;
	            this.test();
	            break;
	        case 20:
	        case 23:
	        case 25:
	        case 26:
	        case 27:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 54:
	        case 61:
	        case 62:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1043;
	            this.testlist();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	str() {
	    let localctx = new StrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Python3Parser.RULE_str);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1046;
	        _la = this._input.LA(1);
	        if(!(_la===36 || _la===37)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Python3Parser.RULE_number);
	    try {
	        this.state = 1051;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1048;
	            this.integer();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1049;
	            this.match(Python3Parser.FLOAT_NUMBER);
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1050;
	            this.match(Python3Parser.IMAG_NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Python3Parser.RULE_integer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1053;
	        _la = this._input.LA(1);
	        if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Python3Parser.EOF = antlr4.Token.EOF;
Python3Parser.DEF = 1;
Python3Parser.RETURN = 2;
Python3Parser.RAISE = 3;
Python3Parser.FROM = 4;
Python3Parser.IMPORT = 5;
Python3Parser.AS = 6;
Python3Parser.GLOBAL = 7;
Python3Parser.NONLOCAL = 8;
Python3Parser.ASSERT = 9;
Python3Parser.IF = 10;
Python3Parser.ELIF = 11;
Python3Parser.ELSE = 12;
Python3Parser.WHILE = 13;
Python3Parser.FOR = 14;
Python3Parser.IN = 15;
Python3Parser.TRY = 16;
Python3Parser.FINALLY = 17;
Python3Parser.WITH = 18;
Python3Parser.EXCEPT = 19;
Python3Parser.LAMBDA = 20;
Python3Parser.OR = 21;
Python3Parser.AND = 22;
Python3Parser.NOT = 23;
Python3Parser.IS = 24;
Python3Parser.NONE = 25;
Python3Parser.TRUE = 26;
Python3Parser.FALSE = 27;
Python3Parser.CLASS = 28;
Python3Parser.YIELD = 29;
Python3Parser.DEL = 30;
Python3Parser.PASS = 31;
Python3Parser.CONTINUE = 32;
Python3Parser.BREAK = 33;
Python3Parser.NEWLINE = 34;
Python3Parser.NAME = 35;
Python3Parser.STRING_LITERAL = 36;
Python3Parser.BYTES_LITERAL = 37;
Python3Parser.DECIMAL_INTEGER = 38;
Python3Parser.OCT_INTEGER = 39;
Python3Parser.HEX_INTEGER = 40;
Python3Parser.BIN_INTEGER = 41;
Python3Parser.FLOAT_NUMBER = 42;
Python3Parser.IMAG_NUMBER = 43;
Python3Parser.DOT = 44;
Python3Parser.ELLIPSIS = 45;
Python3Parser.STAR = 46;
Python3Parser.OPEN_PAREN = 47;
Python3Parser.CLOSE_PAREN = 48;
Python3Parser.COMMA = 49;
Python3Parser.COLON = 50;
Python3Parser.SEMI_COLON = 51;
Python3Parser.POWER = 52;
Python3Parser.ASSIGN = 53;
Python3Parser.OPEN_BRACK = 54;
Python3Parser.CLOSE_BRACK = 55;
Python3Parser.OR_OP = 56;
Python3Parser.XOR = 57;
Python3Parser.AND_OP = 58;
Python3Parser.LEFT_SHIFT = 59;
Python3Parser.RIGHT_SHIFT = 60;
Python3Parser.ADD = 61;
Python3Parser.MINUS = 62;
Python3Parser.DIV = 63;
Python3Parser.MOD = 64;
Python3Parser.IDIV = 65;
Python3Parser.NOT_OP = 66;
Python3Parser.OPEN_BRACE = 67;
Python3Parser.CLOSE_BRACE = 68;
Python3Parser.LESS_THAN = 69;
Python3Parser.GREATER_THAN = 70;
Python3Parser.EQUALS = 71;
Python3Parser.GT_EQ = 72;
Python3Parser.LT_EQ = 73;
Python3Parser.NOT_EQ_1 = 74;
Python3Parser.NOT_EQ_2 = 75;
Python3Parser.AT = 76;
Python3Parser.ARROW = 77;
Python3Parser.ADD_ASSIGN = 78;
Python3Parser.SUB_ASSIGN = 79;
Python3Parser.MULT_ASSIGN = 80;
Python3Parser.AT_ASSIGN = 81;
Python3Parser.DIV_ASSIGN = 82;
Python3Parser.MOD_ASSIGN = 83;
Python3Parser.AND_ASSIGN = 84;
Python3Parser.OR_ASSIGN = 85;
Python3Parser.XOR_ASSIGN = 86;
Python3Parser.LEFT_SHIFT_ASSIGN = 87;
Python3Parser.RIGHT_SHIFT_ASSIGN = 88;
Python3Parser.POWER_ASSIGN = 89;
Python3Parser.IDIV_ASSIGN = 90;
Python3Parser.SKIP_ = 91;
Python3Parser.UNKNOWN_CHAR = 92;
Python3Parser.INDENT = 93;
Python3Parser.DEDENT = 94;

Python3Parser.RULE_single_input = 0;
Python3Parser.RULE_file_input = 1;
Python3Parser.RULE_eval_input = 2;
Python3Parser.RULE_decorator = 3;
Python3Parser.RULE_decorators = 4;
Python3Parser.RULE_decorated = 5;
Python3Parser.RULE_funcdef = 6;
Python3Parser.RULE_parameters = 7;
Python3Parser.RULE_typedargslist = 8;
Python3Parser.RULE_tfpdef = 9;
Python3Parser.RULE_varargslist = 10;
Python3Parser.RULE_vfpdef = 11;
Python3Parser.RULE_stmt = 12;
Python3Parser.RULE_simple_stmt = 13;
Python3Parser.RULE_small_stmt = 14;
Python3Parser.RULE_expr_stmt = 15;
Python3Parser.RULE_testlist_star_expr = 16;
Python3Parser.RULE_augassign = 17;
Python3Parser.RULE_del_stmt = 18;
Python3Parser.RULE_pass_stmt = 19;
Python3Parser.RULE_flow_stmt = 20;
Python3Parser.RULE_break_stmt = 21;
Python3Parser.RULE_continue_stmt = 22;
Python3Parser.RULE_return_stmt = 23;
Python3Parser.RULE_yield_stmt = 24;
Python3Parser.RULE_raise_stmt = 25;
Python3Parser.RULE_import_stmt = 26;
Python3Parser.RULE_import_name = 27;
Python3Parser.RULE_import_from = 28;
Python3Parser.RULE_import_as_name = 29;
Python3Parser.RULE_dotted_as_name = 30;
Python3Parser.RULE_import_as_names = 31;
Python3Parser.RULE_dotted_as_names = 32;
Python3Parser.RULE_dotted_name = 33;
Python3Parser.RULE_global_stmt = 34;
Python3Parser.RULE_nonlocal_stmt = 35;
Python3Parser.RULE_assert_stmt = 36;
Python3Parser.RULE_compound_stmt = 37;
Python3Parser.RULE_if_stmt = 38;
Python3Parser.RULE_while_stmt = 39;
Python3Parser.RULE_for_stmt = 40;
Python3Parser.RULE_try_stmt = 41;
Python3Parser.RULE_with_stmt = 42;
Python3Parser.RULE_with_item = 43;
Python3Parser.RULE_except_clause = 44;
Python3Parser.RULE_suite = 45;
Python3Parser.RULE_test = 46;
Python3Parser.RULE_test_nocond = 47;
Python3Parser.RULE_lambdef = 48;
Python3Parser.RULE_lambdef_nocond = 49;
Python3Parser.RULE_or_test = 50;
Python3Parser.RULE_and_test = 51;
Python3Parser.RULE_not_test = 52;
Python3Parser.RULE_comparison = 53;
Python3Parser.RULE_comp_op = 54;
Python3Parser.RULE_star_expr = 55;
Python3Parser.RULE_expr = 56;
Python3Parser.RULE_xor_expr = 57;
Python3Parser.RULE_and_expr = 58;
Python3Parser.RULE_shift_expr = 59;
Python3Parser.RULE_arith_expr = 60;
Python3Parser.RULE_term = 61;
Python3Parser.RULE_factor = 62;
Python3Parser.RULE_power = 63;
Python3Parser.RULE_atom = 64;
Python3Parser.RULE_testlist_comp = 65;
Python3Parser.RULE_trailer = 66;
Python3Parser.RULE_subscriptlist = 67;
Python3Parser.RULE_subscript = 68;
Python3Parser.RULE_sliceop = 69;
Python3Parser.RULE_exprlist = 70;
Python3Parser.RULE_testlist = 71;
Python3Parser.RULE_dictorsetmaker = 72;
Python3Parser.RULE_classdef = 73;
Python3Parser.RULE_arglist = 74;
Python3Parser.RULE_argument = 75;
Python3Parser.RULE_comp_iter = 76;
Python3Parser.RULE_comp_for = 77;
Python3Parser.RULE_comp_if = 78;
Python3Parser.RULE_yield_expr = 79;
Python3Parser.RULE_yield_arg = 80;
Python3Parser.RULE_str = 81;
Python3Parser.RULE_number = 82;
Python3Parser.RULE_integer = 83;

class Single_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_single_input;
    }

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	simple_stmt() {
	    return this.getTypedRuleContext(Simple_stmtContext,0);
	};

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSingle_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSingle_input(this);
		}
	}


}



class File_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_file_input;
    }

	EOF() {
	    return this.getToken(Python3Parser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NEWLINE);
	    } else {
	        return this.getToken(Python3Parser.NEWLINE, i);
	    }
	};


	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterFile_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitFile_input(this);
		}
	}


}



class Eval_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_eval_input;
    }

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	EOF() {
	    return this.getToken(Python3Parser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NEWLINE);
	    } else {
	        return this.getToken(Python3Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterEval_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitEval_input(this);
		}
	}


}



class DecoratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorator;
    }

	AT() {
	    return this.getToken(Python3Parser.AT, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDecorator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDecorator(this);
		}
	}


}



class DecoratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorators;
    }

	decorator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecoratorContext);
	    } else {
	        return this.getTypedRuleContext(DecoratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDecorators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDecorators(this);
		}
	}


}



class DecoratedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorated;
    }

	decorators() {
	    return this.getTypedRuleContext(DecoratorsContext,0);
	};

	classdef() {
	    return this.getTypedRuleContext(ClassdefContext,0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDecorated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDecorated(this);
		}
	}


}



class FuncdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_funcdef;
    }

	DEF() {
	    return this.getToken(Python3Parser.DEF, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	suite() {
	    return this.getTypedRuleContext(SuiteContext,0);
	};

	ARROW() {
	    return this.getToken(Python3Parser.ARROW, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterFuncdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitFuncdef(this);
		}
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_parameters;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	typedargslist() {
	    return this.getTypedRuleContext(TypedargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitParameters(this);
		}
	}


}



class TypedargslistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_typedargslist;
    }

	tfpdef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TfpdefContext);
	    } else {
	        return this.getTypedRuleContext(TfpdefContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTypedargslist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTypedargslist(this);
		}
	}


}



class TfpdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_tfpdef;
    }

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTfpdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTfpdef(this);
		}
	}


}



class VarargslistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_varargslist;
    }

	vfpdef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VfpdefContext);
	    } else {
	        return this.getTypedRuleContext(VfpdefContext,i);
	    }
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterVarargslist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitVarargslist(this);
		}
	}


}



class VfpdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_vfpdef;
    }

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterVfpdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitVfpdef(this);
		}
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_stmt;
    }

	simple_stmt() {
	    return this.getTypedRuleContext(Simple_stmtContext,0);
	};

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitStmt(this);
		}
	}


}



class Simple_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_simple_stmt;
    }

	small_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Small_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Small_stmtContext,i);
	    }
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	SEMI_COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.SEMI_COLON);
	    } else {
	        return this.getToken(Python3Parser.SEMI_COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSimple_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSimple_stmt(this);
		}
	}


}



class Small_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_small_stmt;
    }

	expr_stmt() {
	    return this.getTypedRuleContext(Expr_stmtContext,0);
	};

	del_stmt() {
	    return this.getTypedRuleContext(Del_stmtContext,0);
	};

	pass_stmt() {
	    return this.getTypedRuleContext(Pass_stmtContext,0);
	};

	flow_stmt() {
	    return this.getTypedRuleContext(Flow_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	global_stmt() {
	    return this.getTypedRuleContext(Global_stmtContext,0);
	};

	nonlocal_stmt() {
	    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
	};

	assert_stmt() {
	    return this.getTypedRuleContext(Assert_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSmall_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSmall_stmt(this);
		}
	}


}



class Expr_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_expr_stmt;
    }

	testlist_star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Testlist_star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Testlist_star_exprContext,i);
	    }
	};

	augassign() {
	    return this.getTypedRuleContext(AugassignContext,0);
	};

	yield_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Yield_exprContext);
	    } else {
	        return this.getTypedRuleContext(Yield_exprContext,i);
	    }
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterExpr_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitExpr_stmt(this);
		}
	}


}



class Testlist_star_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist_star_expr;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTestlist_star_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTestlist_star_expr(this);
		}
	}


}



class AugassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_augassign;
    }

	ADD_ASSIGN() {
	    return this.getToken(Python3Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Python3Parser.SUB_ASSIGN, 0);
	};

	MULT_ASSIGN() {
	    return this.getToken(Python3Parser.MULT_ASSIGN, 0);
	};

	AT_ASSIGN() {
	    return this.getToken(Python3Parser.AT_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Python3Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Python3Parser.MOD_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Python3Parser.AND_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Python3Parser.OR_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Python3Parser.XOR_ASSIGN, 0);
	};

	LEFT_SHIFT_ASSIGN() {
	    return this.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0);
	};

	RIGHT_SHIFT_ASSIGN() {
	    return this.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0);
	};

	POWER_ASSIGN() {
	    return this.getToken(Python3Parser.POWER_ASSIGN, 0);
	};

	IDIV_ASSIGN() {
	    return this.getToken(Python3Parser.IDIV_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterAugassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitAugassign(this);
		}
	}


}



class Del_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_del_stmt;
    }

	DEL() {
	    return this.getToken(Python3Parser.DEL, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDel_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDel_stmt(this);
		}
	}


}



class Pass_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_pass_stmt;
    }

	PASS() {
	    return this.getToken(Python3Parser.PASS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterPass_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitPass_stmt(this);
		}
	}


}



class Flow_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_flow_stmt;
    }

	break_stmt() {
	    return this.getTypedRuleContext(Break_stmtContext,0);
	};

	continue_stmt() {
	    return this.getTypedRuleContext(Continue_stmtContext,0);
	};

	return_stmt() {
	    return this.getTypedRuleContext(Return_stmtContext,0);
	};

	raise_stmt() {
	    return this.getTypedRuleContext(Raise_stmtContext,0);
	};

	yield_stmt() {
	    return this.getTypedRuleContext(Yield_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterFlow_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitFlow_stmt(this);
		}
	}


}



class Break_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_break_stmt;
    }

	BREAK() {
	    return this.getToken(Python3Parser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterBreak_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitBreak_stmt(this);
		}
	}


}



class Continue_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_continue_stmt;
    }

	CONTINUE() {
	    return this.getToken(Python3Parser.CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterContinue_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitContinue_stmt(this);
		}
	}


}



class Return_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_return_stmt;
    }

	RETURN() {
	    return this.getToken(Python3Parser.RETURN, 0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterReturn_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitReturn_stmt(this);
		}
	}


}



class Yield_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_stmt;
    }

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterYield_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitYield_stmt(this);
		}
	}


}



class Raise_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_raise_stmt;
    }

	RAISE() {
	    return this.getToken(Python3Parser.RAISE, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterRaise_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitRaise_stmt(this);
		}
	}


}



class Import_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_stmt;
    }

	import_name() {
	    return this.getTypedRuleContext(Import_nameContext,0);
	};

	import_from() {
	    return this.getTypedRuleContext(Import_fromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterImport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitImport_stmt(this);
		}
	}


}



class Import_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_name;
    }

	IMPORT() {
	    return this.getToken(Python3Parser.IMPORT, 0);
	};

	dotted_as_names() {
	    return this.getTypedRuleContext(Dotted_as_namesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterImport_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitImport_name(this);
		}
	}


}



class Import_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_from;
    }

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	IMPORT() {
	    return this.getToken(Python3Parser.IMPORT, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	import_as_names() {
	    return this.getTypedRuleContext(Import_as_namesContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	ELLIPSIS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ELLIPSIS);
	    } else {
	        return this.getToken(Python3Parser.ELLIPSIS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterImport_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitImport_from(this);
		}
	}


}



class Import_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_as_name;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterImport_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitImport_as_name(this);
		}
	}


}



class Dotted_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_as_name;
    }

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDotted_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDotted_as_name(this);
		}
	}


}



class Import_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_as_names;
    }

	import_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Import_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterImport_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitImport_as_names(this);
		}
	}


}



class Dotted_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_as_names;
    }

	dotted_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dotted_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Dotted_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDotted_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDotted_as_names(this);
		}
	}


}



class Dotted_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_name;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDotted_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDotted_name(this);
		}
	}


}



class Global_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_global_stmt;
    }

	GLOBAL() {
	    return this.getToken(Python3Parser.GLOBAL, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterGlobal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitGlobal_stmt(this);
		}
	}


}



class Nonlocal_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_nonlocal_stmt;
    }

	NONLOCAL() {
	    return this.getToken(Python3Parser.NONLOCAL, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterNonlocal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitNonlocal_stmt(this);
		}
	}


}



class Assert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_assert_stmt;
    }

	ASSERT() {
	    return this.getToken(Python3Parser.ASSERT, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(Python3Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterAssert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitAssert_stmt(this);
		}
	}


}



class Compound_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_compound_stmt;
    }

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	while_stmt() {
	    return this.getTypedRuleContext(While_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	try_stmt() {
	    return this.getTypedRuleContext(Try_stmtContext,0);
	};

	with_stmt() {
	    return this.getTypedRuleContext(With_stmtContext,0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	classdef() {
	    return this.getTypedRuleContext(ClassdefContext,0);
	};

	decorated() {
	    return this.getTypedRuleContext(DecoratedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterCompound_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitCompound_stmt(this);
		}
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_if_stmt;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	ELIF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ELIF);
	    } else {
	        return this.getToken(Python3Parser.ELIF, i);
	    }
	};


	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitIf_stmt(this);
		}
	}


}



class While_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_while_stmt;
    }

	WHILE() {
	    return this.getToken(Python3Parser.WHILE, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterWhile_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitWhile_stmt(this);
		}
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_for_stmt;
    }

	FOR() {
	    return this.getToken(Python3Parser.FOR, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitFor_stmt(this);
		}
	}


}



class Try_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_try_stmt;
    }

	TRY() {
	    return this.getToken(Python3Parser.TRY, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	FINALLY() {
	    return this.getToken(Python3Parser.FINALLY, 0);
	};

	except_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Except_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Except_clauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTry_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTry_stmt(this);
		}
	}


}



class With_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_with_stmt;
    }

	WITH() {
	    return this.getToken(Python3Parser.WITH, 0);
	};

	with_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(With_itemContext);
	    } else {
	        return this.getTypedRuleContext(With_itemContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	suite() {
	    return this.getTypedRuleContext(SuiteContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterWith_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitWith_stmt(this);
		}
	}


}



class With_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_with_item;
    }

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterWith_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitWith_item(this);
		}
	}


}



class Except_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_except_clause;
    }

	EXCEPT() {
	    return this.getToken(Python3Parser.EXCEPT, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterExcept_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitExcept_clause(this);
		}
	}


}



class SuiteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_suite;
    }

	simple_stmt() {
	    return this.getTypedRuleContext(Simple_stmtContext,0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	INDENT() {
	    return this.getToken(Python3Parser.INDENT, 0);
	};

	DEDENT() {
	    return this.getToken(Python3Parser.DEDENT, 0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSuite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSuite(this);
		}
	}


}



class TestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_test;
    }

	or_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_testContext);
	    } else {
	        return this.getTypedRuleContext(Or_testContext,i);
	    }
	};

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	lambdef() {
	    return this.getTypedRuleContext(LambdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTest(this);
		}
	}


}



class Test_nocondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_test_nocond;
    }

	or_test() {
	    return this.getTypedRuleContext(Or_testContext,0);
	};

	lambdef_nocond() {
	    return this.getTypedRuleContext(Lambdef_nocondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTest_nocond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTest_nocond(this);
		}
	}


}



class LambdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_lambdef;
    }

	LAMBDA() {
	    return this.getToken(Python3Parser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	varargslist() {
	    return this.getTypedRuleContext(VarargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterLambdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitLambdef(this);
		}
	}


}



class Lambdef_nocondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_lambdef_nocond;
    }

	LAMBDA() {
	    return this.getToken(Python3Parser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test_nocond() {
	    return this.getTypedRuleContext(Test_nocondContext,0);
	};

	varargslist() {
	    return this.getTypedRuleContext(VarargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterLambdef_nocond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitLambdef_nocond(this);
		}
	}


}



class Or_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_or_test;
    }

	and_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_testContext);
	    } else {
	        return this.getTypedRuleContext(And_testContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.OR);
	    } else {
	        return this.getToken(Python3Parser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterOr_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitOr_test(this);
		}
	}


}



class And_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_and_test;
    }

	not_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Not_testContext);
	    } else {
	        return this.getTypedRuleContext(Not_testContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AND);
	    } else {
	        return this.getToken(Python3Parser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterAnd_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitAnd_test(this);
		}
	}


}



class Not_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_not_test;
    }

	NOT() {
	    return this.getToken(Python3Parser.NOT, 0);
	};

	not_test() {
	    return this.getTypedRuleContext(Not_testContext,0);
	};

	comparison() {
	    return this.getTypedRuleContext(ComparisonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterNot_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitNot_test(this);
		}
	}


}



class ComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comparison;
    }

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	comp_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comp_opContext);
	    } else {
	        return this.getTypedRuleContext(Comp_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitComparison(this);
		}
	}


}



class Comp_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_op;
    }

	LESS_THAN() {
	    return this.getToken(Python3Parser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(Python3Parser.GREATER_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(Python3Parser.EQUALS, 0);
	};

	GT_EQ() {
	    return this.getToken(Python3Parser.GT_EQ, 0);
	};

	LT_EQ() {
	    return this.getToken(Python3Parser.LT_EQ, 0);
	};

	NOT_EQ_1() {
	    return this.getToken(Python3Parser.NOT_EQ_1, 0);
	};

	NOT_EQ_2() {
	    return this.getToken(Python3Parser.NOT_EQ_2, 0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	NOT() {
	    return this.getToken(Python3Parser.NOT, 0);
	};

	IS() {
	    return this.getToken(Python3Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterComp_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitComp_op(this);
		}
	}


}



class Star_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_star_expr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterStar_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitStar_expr(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_expr;
    }

	xor_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xor_exprContext);
	    } else {
	        return this.getTypedRuleContext(Xor_exprContext,i);
	    }
	};

	OR_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.OR_OP);
	    } else {
	        return this.getToken(Python3Parser.OR_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitExpr(this);
		}
	}


}



class Xor_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_xor_expr;
    }

	and_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_exprContext);
	    } else {
	        return this.getTypedRuleContext(And_exprContext,i);
	    }
	};

	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.XOR);
	    } else {
	        return this.getToken(Python3Parser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterXor_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitXor_expr(this);
		}
	}


}



class And_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_and_expr;
    }

	shift_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_exprContext);
	    } else {
	        return this.getTypedRuleContext(Shift_exprContext,i);
	    }
	};

	AND_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AND_OP);
	    } else {
	        return this.getToken(Python3Parser.AND_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterAnd_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitAnd_expr(this);
		}
	}


}



class Shift_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_shift_expr;
    }

	arith_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arith_exprContext);
	    } else {
	        return this.getTypedRuleContext(Arith_exprContext,i);
	    }
	};

	LEFT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.LEFT_SHIFT);
	    } else {
	        return this.getToken(Python3Parser.LEFT_SHIFT, i);
	    }
	};


	RIGHT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.RIGHT_SHIFT);
	    } else {
	        return this.getToken(Python3Parser.RIGHT_SHIFT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterShift_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitShift_expr(this);
		}
	}


}



class Arith_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_arith_expr;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ADD);
	    } else {
	        return this.getToken(Python3Parser.ADD, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.MINUS);
	    } else {
	        return this.getToken(Python3Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterArith_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitArith_expr(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.STAR);
	    } else {
	        return this.getToken(Python3Parser.STAR, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DIV);
	    } else {
	        return this.getToken(Python3Parser.DIV, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.MOD);
	    } else {
	        return this.getToken(Python3Parser.MOD, i);
	    }
	};


	IDIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.IDIV);
	    } else {
	        return this.getToken(Python3Parser.IDIV, i);
	    }
	};


	AT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AT);
	    } else {
	        return this.getToken(Python3Parser.AT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTerm(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_factor;
    }

	ADD() {
	    return this.getToken(Python3Parser.ADD, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	MINUS() {
	    return this.getToken(Python3Parser.MINUS, 0);
	};

	NOT_OP() {
	    return this.getToken(Python3Parser.NOT_OP, 0);
	};

	power() {
	    return this.getTypedRuleContext(PowerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitFactor(this);
		}
	}


}



class PowerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_power;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	trailer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TrailerContext);
	    } else {
	        return this.getTypedRuleContext(TrailerContext,i);
	    }
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterPower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitPower(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_atom;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	testlist_comp() {
	    return this.getTypedRuleContext(Testlist_compContext,0);
	};

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(Python3Parser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(Python3Parser.CLOSE_BRACE, 0);
	};

	dictorsetmaker() {
	    return this.getTypedRuleContext(DictorsetmakerContext,0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	str = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StrContext);
	    } else {
	        return this.getTypedRuleContext(StrContext,i);
	    }
	};

	ELLIPSIS() {
	    return this.getToken(Python3Parser.ELLIPSIS, 0);
	};

	NONE() {
	    return this.getToken(Python3Parser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(Python3Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Python3Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitAtom(this);
		}
	}


}



class Testlist_compContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist_comp;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTestlist_comp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTestlist_comp(this);
		}
	}


}



class TrailerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_trailer;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	subscriptlist() {
	    return this.getTypedRuleContext(SubscriptlistContext,0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	DOT() {
	    return this.getToken(Python3Parser.DOT, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTrailer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTrailer(this);
		}
	}


}



class SubscriptlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subscriptlist;
    }

	subscript = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubscriptContext);
	    } else {
	        return this.getTypedRuleContext(SubscriptContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSubscriptlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSubscriptlist(this);
		}
	}


}



class SubscriptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subscript;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	sliceop() {
	    return this.getTypedRuleContext(SliceopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSubscript(this);
		}
	}


}



class SliceopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_sliceop;
    }

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterSliceop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitSliceop(this);
		}
	}


}



class ExprlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_exprlist;
    }

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterExprlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitExprlist(this);
		}
	}


}



class TestlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterTestlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitTestlist(this);
		}
	}


}



class DictorsetmakerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dictorsetmaker;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterDictorsetmaker(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitDictorsetmaker(this);
		}
	}


}



class ClassdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_classdef;
    }

	CLASS() {
	    return this.getToken(Python3Parser.CLASS, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	suite() {
	    return this.getTypedRuleContext(SuiteContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterClassdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitClassdef(this);
		}
	}


}



class ArglistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_arglist;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterArglist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitArglist(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_argument;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	ASSIGN() {
	    return this.getToken(Python3Parser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitArgument(this);
		}
	}


}



class Comp_iterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_iter;
    }

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	comp_if() {
	    return this.getTypedRuleContext(Comp_ifContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterComp_iter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitComp_iter(this);
		}
	}


}



class Comp_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_for;
    }

	FOR() {
	    return this.getToken(Python3Parser.FOR, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	or_test() {
	    return this.getTypedRuleContext(Or_testContext,0);
	};

	comp_iter() {
	    return this.getTypedRuleContext(Comp_iterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterComp_for(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitComp_for(this);
		}
	}


}



class Comp_ifContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_if;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test_nocond() {
	    return this.getTypedRuleContext(Test_nocondContext,0);
	};

	comp_iter() {
	    return this.getTypedRuleContext(Comp_iterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterComp_if(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitComp_if(this);
		}
	}


}



class Yield_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_expr;
    }

	YIELD() {
	    return this.getToken(Python3Parser.YIELD, 0);
	};

	yield_arg() {
	    return this.getTypedRuleContext(Yield_argContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterYield_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitYield_expr(this);
		}
	}


}



class Yield_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_arg;
    }

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterYield_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitYield_arg(this);
		}
	}


}



class StrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_str;
    }

	STRING_LITERAL() {
	    return this.getToken(Python3Parser.STRING_LITERAL, 0);
	};

	BYTES_LITERAL() {
	    return this.getToken(Python3Parser.BYTES_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterStr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitStr(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_number;
    }

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	FLOAT_NUMBER() {
	    return this.getToken(Python3Parser.FLOAT_NUMBER, 0);
	};

	IMAG_NUMBER() {
	    return this.getToken(Python3Parser.IMAG_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitNumber(this);
		}
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_integer;
    }

	DECIMAL_INTEGER() {
	    return this.getToken(Python3Parser.DECIMAL_INTEGER, 0);
	};

	OCT_INTEGER() {
	    return this.getToken(Python3Parser.OCT_INTEGER, 0);
	};

	HEX_INTEGER() {
	    return this.getToken(Python3Parser.HEX_INTEGER, 0);
	};

	BIN_INTEGER() {
	    return this.getToken(Python3Parser.BIN_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3Listener ) {
	        listener.exitInteger(this);
		}
	}


}




Python3Parser.Single_inputContext = Single_inputContext; 
Python3Parser.File_inputContext = File_inputContext; 
Python3Parser.Eval_inputContext = Eval_inputContext; 
Python3Parser.DecoratorContext = DecoratorContext; 
Python3Parser.DecoratorsContext = DecoratorsContext; 
Python3Parser.DecoratedContext = DecoratedContext; 
Python3Parser.FuncdefContext = FuncdefContext; 
Python3Parser.ParametersContext = ParametersContext; 
Python3Parser.TypedargslistContext = TypedargslistContext; 
Python3Parser.TfpdefContext = TfpdefContext; 
Python3Parser.VarargslistContext = VarargslistContext; 
Python3Parser.VfpdefContext = VfpdefContext; 
Python3Parser.StmtContext = StmtContext; 
Python3Parser.Simple_stmtContext = Simple_stmtContext; 
Python3Parser.Small_stmtContext = Small_stmtContext; 
Python3Parser.Expr_stmtContext = Expr_stmtContext; 
Python3Parser.Testlist_star_exprContext = Testlist_star_exprContext; 
Python3Parser.AugassignContext = AugassignContext; 
Python3Parser.Del_stmtContext = Del_stmtContext; 
Python3Parser.Pass_stmtContext = Pass_stmtContext; 
Python3Parser.Flow_stmtContext = Flow_stmtContext; 
Python3Parser.Break_stmtContext = Break_stmtContext; 
Python3Parser.Continue_stmtContext = Continue_stmtContext; 
Python3Parser.Return_stmtContext = Return_stmtContext; 
Python3Parser.Yield_stmtContext = Yield_stmtContext; 
Python3Parser.Raise_stmtContext = Raise_stmtContext; 
Python3Parser.Import_stmtContext = Import_stmtContext; 
Python3Parser.Import_nameContext = Import_nameContext; 
Python3Parser.Import_fromContext = Import_fromContext; 
Python3Parser.Import_as_nameContext = Import_as_nameContext; 
Python3Parser.Dotted_as_nameContext = Dotted_as_nameContext; 
Python3Parser.Import_as_namesContext = Import_as_namesContext; 
Python3Parser.Dotted_as_namesContext = Dotted_as_namesContext; 
Python3Parser.Dotted_nameContext = Dotted_nameContext; 
Python3Parser.Global_stmtContext = Global_stmtContext; 
Python3Parser.Nonlocal_stmtContext = Nonlocal_stmtContext; 
Python3Parser.Assert_stmtContext = Assert_stmtContext; 
Python3Parser.Compound_stmtContext = Compound_stmtContext; 
Python3Parser.If_stmtContext = If_stmtContext; 
Python3Parser.While_stmtContext = While_stmtContext; 
Python3Parser.For_stmtContext = For_stmtContext; 
Python3Parser.Try_stmtContext = Try_stmtContext; 
Python3Parser.With_stmtContext = With_stmtContext; 
Python3Parser.With_itemContext = With_itemContext; 
Python3Parser.Except_clauseContext = Except_clauseContext; 
Python3Parser.SuiteContext = SuiteContext; 
Python3Parser.TestContext = TestContext; 
Python3Parser.Test_nocondContext = Test_nocondContext; 
Python3Parser.LambdefContext = LambdefContext; 
Python3Parser.Lambdef_nocondContext = Lambdef_nocondContext; 
Python3Parser.Or_testContext = Or_testContext; 
Python3Parser.And_testContext = And_testContext; 
Python3Parser.Not_testContext = Not_testContext; 
Python3Parser.ComparisonContext = ComparisonContext; 
Python3Parser.Comp_opContext = Comp_opContext; 
Python3Parser.Star_exprContext = Star_exprContext; 
Python3Parser.ExprContext = ExprContext; 
Python3Parser.Xor_exprContext = Xor_exprContext; 
Python3Parser.And_exprContext = And_exprContext; 
Python3Parser.Shift_exprContext = Shift_exprContext; 
Python3Parser.Arith_exprContext = Arith_exprContext; 
Python3Parser.TermContext = TermContext; 
Python3Parser.FactorContext = FactorContext; 
Python3Parser.PowerContext = PowerContext; 
Python3Parser.AtomContext = AtomContext; 
Python3Parser.Testlist_compContext = Testlist_compContext; 
Python3Parser.TrailerContext = TrailerContext; 
Python3Parser.SubscriptlistContext = SubscriptlistContext; 
Python3Parser.SubscriptContext = SubscriptContext; 
Python3Parser.SliceopContext = SliceopContext; 
Python3Parser.ExprlistContext = ExprlistContext; 
Python3Parser.TestlistContext = TestlistContext; 
Python3Parser.DictorsetmakerContext = DictorsetmakerContext; 
Python3Parser.ClassdefContext = ClassdefContext; 
Python3Parser.ArglistContext = ArglistContext; 
Python3Parser.ArgumentContext = ArgumentContext; 
Python3Parser.Comp_iterContext = Comp_iterContext; 
Python3Parser.Comp_forContext = Comp_forContext; 
Python3Parser.Comp_ifContext = Comp_ifContext; 
Python3Parser.Yield_exprContext = Yield_exprContext; 
Python3Parser.Yield_argContext = Yield_argContext; 
Python3Parser.StrContext = StrContext; 
Python3Parser.NumberContext = NumberContext; 
Python3Parser.IntegerContext = IntegerContext; 

// module.exports = Python3Parser